'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _typeof = require('@babel/runtime/helpers/typeof');
var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var _asyncToGenerator = require('@babel/runtime/helpers/asyncToGenerator');
var _regeneratorRuntime = require('@babel/runtime/regenerator');
var _toArray = require('@babel/runtime/helpers/toArray');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _objectSpread = require('@babel/runtime/helpers/objectSpread2');
var _createForOfIteratorHelper = require('@babel/runtime/helpers/createForOfIteratorHelper');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _typeof__default = /*#__PURE__*/_interopDefaultLegacy(_typeof);
var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);
var _asyncToGenerator__default = /*#__PURE__*/_interopDefaultLegacy(_asyncToGenerator);
var _regeneratorRuntime__default = /*#__PURE__*/_interopDefaultLegacy(_regeneratorRuntime);
var _toArray__default = /*#__PURE__*/_interopDefaultLegacy(_toArray);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _objectSpread__default = /*#__PURE__*/_interopDefaultLegacy(_objectSpread);
var _createForOfIteratorHelper__default = /*#__PURE__*/_interopDefaultLegacy(_createForOfIteratorHelper);

var promise;
var queueMicrotask_1 = typeof queueMicrotask === 'function' ? queueMicrotask // reuse resolved promise, and allocate it lazily
: function (cb) {
  return (promise || (promise = Promise.resolve())).then(cb)["catch"](function (err) {
    return setTimeout(function () {
      throw err;
    }, 0);
  });
};

var mailbox = function mailbox() {
  var queue = [];
  var next;
  return {
    deliver: function deliver(msg) {
      return _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee() {
        return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                queue.push(msg);

                if (next) {
                  next(queue.shift());
                  next = undefined;
                }

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    },
    receive: function receive() {
      return new Promise(function innerReceive(resolve) {
        var msg = queue.shift();
        if (msg) return resolve(msg);
        next = resolve;
      });
    }
  };
};

var INIT = "INIT";
var SUBSCRIBE = "SUBSCRIBE";
var UNSUBSCRIBE = "UNSUBSCRIBE";
var UPDATED$1 = "UPDATED";
var EXIT = "EXIT";
var TERMINATE = "TERMINATE";
var root = (typeof self === "undefined" ? "undefined" : _typeof__default["default"](self)) === "object" && self.self === self && self || (typeof global === "undefined" ? "undefined" : _typeof__default["default"](global)) === "object" && global.global === global && global || (typeof window === "undefined" ? "undefined" : _typeof__default["default"](window)) === "object" && window.window === window && window;
root.FCL_REGISTRY = root.FCL_REGISTRY == null ? {} : root.FCL_REGISTRY;
var pid = 0;
var DEFAULT_TIMEOUT = 5000;

var _send = function send(addr, tag, data) {
  var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  return new Promise(function (reply, reject) {
    var expectReply = opts.expectReply || false;
    var timeout = opts.timeout != null ? opts.timeout : DEFAULT_TIMEOUT;

    if (expectReply && timeout) {
      setTimeout(function () {
        return reject(new Error("Timeout: ".concat(timeout, "ms passed without a response.")));
      }, timeout);
    }

    var payload = {
      to: addr,
      from: opts.from,
      tag: tag,
      data: data,
      timeout: timeout,
      reply: reply,
      reject: reject
    };

    try {
      root.FCL_REGISTRY[addr] && root.FCL_REGISTRY[addr].mailbox.deliver(payload);
      if (!expectReply) reply(true);
    } catch (error) {
      console.error("FCL.Actor -- Could Not Deliver Message", payload, root.FCL_REGISTRY[addr], error);
    }
  });
};

var kill = function kill(addr) {
  delete root.FCL_REGISTRY[addr];
};

var fromHandlers = function fromHandlers() {
  var handlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return /*#__PURE__*/function () {
    var _ref = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(ctx) {
      var letter;
      return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(typeof handlers[INIT] === "function")) {
                _context.next = 3;
                break;
              }

              _context.next = 3;
              return handlers[INIT](ctx);

            case 3:
              _context.next = 6;
              return ctx.receive();

            case 6:
              letter = _context.sent;
              _context.prev = 7;

              if (!(letter.tag === EXIT)) {
                _context.next = 13;
                break;
              }

              if (!(typeof handlers[TERMINATE] === "function")) {
                _context.next = 12;
                break;
              }

              _context.next = 12;
              return handlers[TERMINATE](ctx, letter, letter.data || {});

            case 12:
              return _context.abrupt("break", 25);

            case 13:
              _context.next = 15;
              return handlers[letter.tag](ctx, letter, letter.data || {});

            case 15:
              _context.next = 20;
              break;

            case 17:
              _context.prev = 17;
              _context.t0 = _context["catch"](7);
              console.error("".concat(ctx.self(), " Error"), letter, _context.t0);

            case 20:
              _context.prev = 20;
              return _context.abrupt("continue", 3);

            case 23:
              _context.next = 3;
              break;

            case 25:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[7, 17, 20, 23]]);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }();
};

var spawn = function spawn(fn) {
  var addr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  if (addr == null) addr = ++pid;
  if (root.FCL_REGISTRY[addr] != null) return addr;
  root.FCL_REGISTRY[addr] = {
    addr: addr,
    mailbox: mailbox(),
    subs: new Set(),
    kvs: {},
    error: null
  };
  var ctx = {
    self: function self() {
      return addr;
    },
    receive: function receive() {
      return root.FCL_REGISTRY[addr].mailbox.receive();
    },
    send: function send(to, tag, data) {
      var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      opts.from = addr;
      return _send(to, tag, data, opts);
    },
    sendSelf: function sendSelf(tag, data, opts) {
      if (root.FCL_REGISTRY[addr]) _send(addr, tag, data, opts);
    },
    broadcast: function broadcast(tag, data) {
      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      opts.from = addr;

      var _iterator = _createForOfIteratorHelper__default["default"](root.FCL_REGISTRY[addr].subs),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var to = _step.value;

          _send(to, tag, data, opts);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    },
    subscribe: function subscribe(sub) {
      return sub != null && root.FCL_REGISTRY[addr].subs.add(sub);
    },
    unsubscribe: function unsubscribe(sub) {
      return sub != null && root.FCL_REGISTRY[addr].subs["delete"](sub);
    },
    subscriberCount: function subscriberCount() {
      return root.FCL_REGISTRY[addr].subs.size;
    },
    hasSubs: function hasSubs() {
      return !!root.FCL_REGISTRY[addr].subs.size;
    },
    put: function put(key, value) {
      if (key != null) root.FCL_REGISTRY[addr].kvs[key] = value;
    },
    get: function get(key, fallback) {
      var value = root.FCL_REGISTRY[addr].kvs[key];
      return value == null ? fallback : value;
    },
    "delete": function _delete(key) {
      delete root.FCL_REGISTRY[addr].kvs[key];
    },
    update: function update(key, fn) {
      if (key != null) root.FCL_REGISTRY[addr].kvs[key] = fn(root.FCL_REGISTRY[addr].kvs[key]);
    },
    keys: function keys() {
      return Object.keys(root.FCL_REGISTRY[addr].kvs);
    },
    all: function all() {
      return root.FCL_REGISTRY[addr].kvs;
    },
    where: function where(pattern) {
      return Object.keys(root.FCL_REGISTRY[addr].kvs).reduce(function (acc, key) {
        return pattern.test(key) ? _objectSpread__default["default"](_objectSpread__default["default"]({}, acc), {}, _defineProperty__default["default"]({}, key, root.FCL_REGISTRY[addr].kvs[key])) : acc;
      }, {});
    },
    merge: function merge() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      Object.keys(data).forEach(function (key) {
        return root.FCL_REGISTRY[addr].kvs[key] = data[key];
      });
    },
    fatalError: function fatalError(error) {
      root.FCL_REGISTRY[addr].error = error;

      var _iterator2 = _createForOfIteratorHelper__default["default"](root.FCL_REGISTRY[addr].subs),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var to = _step2.value;

          _send(to, UPDATED$1);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  };
  if (_typeof__default["default"](fn) === "object") fn = fromHandlers(fn);
  queueMicrotask_1( /*#__PURE__*/_asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee2() {
    return _regeneratorRuntime__default["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return fn(ctx);

          case 2:
            kill(addr);

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })));
  return addr;
}; // Returns an unsubscribe function
// A SUBSCRIBE handler will need to be created to handle the subscription event
//
//  [SUBSCRIBE]: (ctx, letter) => {
//    ctx.subscribe(letter.from)
//    ctx.send(letter.from, UPDATED, ctx.all())
//  }
//


function subscriber(address, spawnFn, callback) {
  spawnFn(address);
  var EXIT = "@EXIT";
  var self = spawn( /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee3(ctx) {
      var letter, error;
      return _regeneratorRuntime__default["default"].wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              ctx.send(address, SUBSCRIBE);

            case 1:
              _context3.next = 4;
              return ctx.receive();

            case 4:
              letter = _context3.sent;
              error = root.FCL_REGISTRY[address].error;

              if (!(letter.tag === EXIT)) {
                _context3.next = 9;
                break;
              }

              ctx.send(address, UNSUBSCRIBE);
              return _context3.abrupt("return");

            case 9:
              if (!error) {
                _context3.next = 13;
                break;
              }

              callback(null, error);
              ctx.send(address, UNSUBSCRIBE);
              return _context3.abrupt("return");

            case 13:
              callback(letter.data, null);
              _context3.next = 1;
              break;

            case 16:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x2) {
      return _ref3.apply(this, arguments);
    };
  }());
  return function () {
    return _send(self, EXIT);
  };
} // Returns a promise that returns a result

var _HANDLERS;

var NAME = "config";
var PUT = "PUT_CONFIG";
var GET = "GET_CONFIG";
var GET_ALL = "GET_ALL_CONFIG";
var UPDATE = "UPDATE_CONFIG";
var DELETE = "DELETE_CONFIG";
var CLEAR = "CLEAR_CONFIG";
var WHERE = "WHERE_CONFIG";
var UPDATED = "CONFIG/UPDATED";

var identity = function identity(v) {
  return v;
};

var HANDLERS = (_HANDLERS = {}, _defineProperty__default["default"](_HANDLERS, PUT, function (ctx, _letter, _ref) {
  var key = _ref.key,
      value = _ref.value;
  if (key == null) throw new Error("Missing 'key' for config/put.");
  ctx.put(key, value);
  ctx.broadcast(UPDATED, _objectSpread__default["default"]({}, ctx.all()));
}), _defineProperty__default["default"](_HANDLERS, GET, function (ctx, letter, _ref2) {
  var key = _ref2.key,
      fallback = _ref2.fallback;
  if (key == null) throw new Error("Missing 'key' for config/get");
  letter.reply(ctx.get(key, fallback));
}), _defineProperty__default["default"](_HANDLERS, GET_ALL, function (ctx, letter) {
  letter.reply(_objectSpread__default["default"]({}, ctx.all()));
}), _defineProperty__default["default"](_HANDLERS, UPDATE, function (ctx, letter, _ref3) {
  var key = _ref3.key,
      fn = _ref3.fn;
  if (key == null) throw new Error("Missing 'key' for config/update");
  ctx.update(key, fn || identity);
  ctx.broadcast(UPDATED, _objectSpread__default["default"]({}, ctx.all()));
}), _defineProperty__default["default"](_HANDLERS, DELETE, function (ctx, letter, _ref4) {
  var key = _ref4.key;
  if (key == null) throw new Error("Missing 'key' for config/delete");
  ctx["delete"](key);
  ctx.broadcast(UPDATED, _objectSpread__default["default"]({}, ctx.all()));
}), _defineProperty__default["default"](_HANDLERS, CLEAR, function (ctx, letter) {
  var keys = Object.keys(ctx.all());

  for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {
    var key = _keys[_i];
    ctx["delete"](key);
  }

  ctx.broadcast(UPDATED, _objectSpread__default["default"]({}, ctx.all()));
}), _defineProperty__default["default"](_HANDLERS, WHERE, function (ctx, letter, _ref5) {
  var pattern = _ref5.pattern;
  if (pattern == null) throw new Error("Missing 'pattern' for config/where");
  letter.reply(ctx.where(pattern));
}), _defineProperty__default["default"](_HANDLERS, SUBSCRIBE, function (ctx, letter) {
  ctx.subscribe(letter.from);
  ctx.send(letter.from, UPDATED, _objectSpread__default["default"]({}, ctx.all()));
}), _defineProperty__default["default"](_HANDLERS, UNSUBSCRIBE, function (ctx, letter) {
  ctx.unsubscribe(letter.from);
}), _HANDLERS);
spawn(HANDLERS, NAME);

function put(key, value) {
  _send(NAME, PUT, {
    key: key,
    value: value
  });
  return config();
}

function get(key, fallback) {
  return _send(NAME, GET, {
    key: key,
    fallback: fallback
  }, {
    expectReply: true,
    timeout: 10
  });
}

function first() {
  return _first.apply(this, arguments);
}

function _first() {
  _first = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee2() {
    var wants,
        fallback,
        _wants,
        head,
        rest,
        ret,
        _args2 = arguments;

    return _regeneratorRuntime__default["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            wants = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : [];
            fallback = _args2.length > 1 ? _args2[1] : undefined;

            if (wants.length) {
              _context2.next = 4;
              break;
            }

            return _context2.abrupt("return", fallback);

          case 4:
            _wants = _toArray__default["default"](wants), head = _wants[0], rest = _wants.slice(1);
            _context2.next = 7;
            return get(head);

          case 7:
            ret = _context2.sent;

            if (!(ret == null)) {
              _context2.next = 10;
              break;
            }

            return _context2.abrupt("return", first(rest, fallback));

          case 10:
            return _context2.abrupt("return", ret);

          case 11:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _first.apply(this, arguments);
}

function all() {
  return _send(NAME, GET_ALL, null, {
    expectReply: true,
    timeout: 10
  });
}

function update(key) {
  var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity;
  _send(NAME, UPDATE, {
    key: key,
    fn: fn
  });
  return config();
}

function _delete(key) {
  _send(NAME, DELETE, {
    key: key
  });
  return config();
}

function where(pattern) {
  return _send(NAME, WHERE, {
    pattern: pattern
  }, {
    expectReply: true,
    timeout: 10
  });
}

function subscribe(callback) {
  return subscriber(NAME, function () {
    return spawn(HANDLERS, NAME);
  }, callback);
}

function clearConfig() {
  return _send(NAME, CLEAR);
}

function resetConfig(oldConfig) {
  return clearConfig().then(config(oldConfig));
}

function config(values) {
  if (values != null && _typeof__default["default"](values) === "object") {
    Object.keys(values).map(function (d) {
      return put(d, values[d]);
    });
  }

  return {
    put: put,
    get: get,
    all: all,
    first: first,
    update: update,
    "delete": _delete,
    where: where,
    subscribe: subscribe,
    overload: overload
  };
}

config.put = put;
config.get = get;
config.all = all;
config.first = first;
config.update = update;
config["delete"] = _delete;
config.where = where;
config.subscribe = subscribe;
config.overload = overload;

var noop = function noop(v) {
  return v;
};

function overload() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
  return new Promise( /*#__PURE__*/function () {
    var _ref6 = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(resolve, reject) {
      var oldConfig, result;
      return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return all();

            case 2:
              oldConfig = _context.sent;
              _context.prev = 3;
              config(opts);
              _context.t0 = callback;
              _context.next = 8;
              return all();

            case 8:
              _context.t1 = _context.sent;
              _context.next = 11;
              return (0, _context.t0)(_context.t1);

            case 11:
              result = _context.sent;
              _context.next = 14;
              return resetConfig(oldConfig);

            case 14:
              resolve(result);
              _context.next = 22;
              break;

            case 17:
              _context.prev = 17;
              _context.t2 = _context["catch"](3);
              _context.next = 21;
              return resetConfig(oldConfig);

            case 21:
              reject(_context.t2);

            case 22:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[3, 17]]);
    }));

    return function (_x, _x2) {
      return _ref6.apply(this, arguments);
    };
  }());
}

var LEVELS = Object.freeze({
  debug: 5,
  info: 4,
  log: 3,
  warn: 2,
  error: 1
});

var buildLoggerMessageArgs = function buildLoggerMessageArgs(_ref) {
  var title = _ref.title,
      message = _ref.message;
  return ["\n    %c".concat(title, "\n    ============================\n\n    ").concat(message, "\n\n    ============================\n    ").replace(/\n[^\S\r\n]+/g, "\n").trim(),, "font-weight:bold;font-family:monospace;"];
};

var log = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(_ref2) {
    var _console, _console2, _console3, _console4, _console5;

    var title, message, level, _ref2$always, always, configLoggerLevel, loggerMessageArgs;

    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            title = _ref2.title, message = _ref2.message, level = _ref2.level, _ref2$always = _ref2.always, always = _ref2$always === void 0 ? false : _ref2$always;
            _context.next = 3;
            return config.get("logger.level", LEVELS.warn);

          case 3:
            configLoggerLevel = _context.sent;

            if (!(!always && configLoggerLevel < level)) {
              _context.next = 6;
              break;
            }

            return _context.abrupt("return");

          case 6:
            loggerMessageArgs = buildLoggerMessageArgs({
              title: title,
              message: message
            });
            _context.t0 = level;
            _context.next = _context.t0 === LEVELS.debug ? 10 : _context.t0 === LEVELS.info ? 12 : _context.t0 === LEVELS.warn ? 14 : _context.t0 === LEVELS.error ? 16 : 18;
            break;

          case 10:
            (_console = console).debug.apply(_console, _toConsumableArray__default["default"](loggerMessageArgs));

            return _context.abrupt("break", 19);

          case 12:
            (_console2 = console).info.apply(_console2, _toConsumableArray__default["default"](loggerMessageArgs));

            return _context.abrupt("break", 19);

          case 14:
            (_console3 = console).warn.apply(_console3, _toConsumableArray__default["default"](loggerMessageArgs));

            return _context.abrupt("break", 19);

          case 16:
            (_console4 = console).error.apply(_console4, _toConsumableArray__default["default"](loggerMessageArgs));

            return _context.abrupt("break", 19);

          case 18:
            (_console5 = console).log.apply(_console5, _toConsumableArray__default["default"](loggerMessageArgs));

          case 19:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function log(_x) {
    return _ref3.apply(this, arguments);
  };
}();

log.deprecate = function (_ref4) {
  var pkg = _ref4.pkg,
      subject = _ref4.subject,
      transition = _ref4.transition,
      _ref4$level = _ref4.level,
      level = _ref4$level === void 0 ? LEVELS.warn : _ref4$level,
      _ref4$message = _ref4.message,
      message = _ref4$message === void 0 ? "" : _ref4$message,
      _ref4$callback = _ref4.callback,
      callback = _ref4$callback === void 0 ? null : _ref4$callback;

  var capitalizeFirstLetter = function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  };

  var logMessage = function logMessage() {
    return log({
      title: "".concat(pkg ? pkg + " " : "", "Deprecation Notice"),
      message: "\n      ".concat(subject ? "".concat(capitalizeFirstLetter(subject), " is deprecated and will cease to work in future releases").concat(pkg ? " of " + pkg : "", ".") : "").concat(message ? "\n" + message : "").concat(transition ? "\nYou can learn more (including a guide on common transition paths) here: ".concat(transition) : "", "\n    ").trim(),
      level: level
    });
  };

  if (typeof callback === "function") {
    return /*#__PURE__*/_asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee2() {
      var _args2 = arguments;
      return _regeneratorRuntime__default["default"].wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return logMessage();

            case 2:
              _context2.next = 4;
              return callback.apply(void 0, _args2);

            case 4:
              return _context2.abrupt("return", _context2.sent);

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
  }

  return logMessage();
};

var type = function type(label, asArgument, asInjection) {
  return {
    label: label,
    asArgument: asArgument,
    asInjection: asInjection
  };
};

var isArray = function isArray(d) {
  return Array.isArray(d);
};

var isObj = function isObj(d) {
  return _typeof__default["default"](d) === "object";
};

var isNull = function isNull(d) {
  return d == null;
};

var isBoolean = function isBoolean(d) {
  return typeof d === "boolean";
};

var isNumber = function isNumber(d) {
  return typeof d === "number";
};

var isInteger = function isInteger(d) {
  return Number.isInteger(d);
};

var isString = function isString(d) {
  return typeof d === "string";
};

var throwTypeError = function throwTypeError(msg) {
  throw new Error("Type Error: " + msg);
};

var numberValuesDeprecationNotice = function numberValuesDeprecationNotice(type) {
  log.deprecate({
    pkg: "@onflow/types",
    subject: "Passing in Number as value for ".concat(type),
    message: "Going forward, use String as value for ".concat(type, "."),
    transition: "https://github.com/onflow/flow-js-sdk/blob/master/packages/types/WARNINGS.md#0002-[U]Int*-and-Word*-as-Number"
  });
};

var Identity = type("Identity", function (v) {
  return v;
}, function (v) {
  return v;
});
var UInt = type("UInt", function (v) {
  if (isNumber(v) && isInteger(v)) {
    numberValuesDeprecationNotice("UInt");
    return {
      type: "UInt",
      value: v.toString()
    };
  }

  if (isString(v)) {
    return {
      type: "UInt",
      value: v
    };
  }

  throwTypeError("Expected Positive Integer for type Unsigned Int");
}, function (v) {
  return v;
});
var Int = type("Int", function (v) {
  if (isNumber(v) && isInteger(v)) {
    numberValuesDeprecationNotice("Int");
    return {
      type: "Int",
      value: v.toString()
    };
  }

  if (isString(v)) {
    return {
      type: "Int",
      value: v
    };
  }

  throwTypeError("Expected Integer for type Int");
}, function (v) {
  return v;
});
var UInt8 = type("UInt8", function (v) {
  if (isNumber(v) && isInteger(v)) {
    numberValuesDeprecationNotice("UInt8");
    return {
      type: "UInt8",
      value: v.toString()
    };
  }

  if (isString(v)) {
    return {
      type: "UInt8",
      value: v
    };
  }

  throwTypeError("Expected integer for UInt8");
}, function (v) {
  return v;
});
var Int8 = type("Int8", function (v) {
  if (isNumber(v) && isInteger(v)) {
    numberValuesDeprecationNotice("Int8");
    return {
      type: "Int8",
      value: v.toString()
    };
  }

  if (isString(v)) {
    return {
      type: "Int8",
      value: v
    };
  }

  throwTypeError("Expected positive integer for Int8");
}, function (v) {
  return v;
});
var UInt16 = type("UInt16", function (v) {
  if (isNumber(v) && isInteger(v)) {
    numberValuesDeprecationNotice("UInt16");
    return {
      type: "UInt16",
      value: v.toString()
    };
  }

  if (isString(v)) {
    return {
      type: "UInt16",
      value: v
    };
  }

  throwTypeError("Expected integer for UInt16");
}, function (v) {
  return v;
});
var Int16 = type("Int16", function (v) {
  if (isNumber(v) && isInteger(v)) {
    numberValuesDeprecationNotice("Int16");
    return {
      type: "Int16",
      value: v.toString()
    };
  }

  if (isString(v)) {
    return {
      type: "Int16",
      value: v
    };
  }

  throwTypeError("Expected positive integer for Int16");
}, function (v) {
  return v;
});
var UInt32 = type("UInt32", function (v) {
  if (isNumber(v) && isInteger(v)) {
    numberValuesDeprecationNotice("UInt32");
    return {
      type: "UInt32",
      value: v.toString()
    };
  }

  if (isString(v)) {
    return {
      type: "UInt32",
      value: v
    };
  }

  throwTypeError("Expected integer for UInt32");
}, function (v) {
  return v;
});
var Int32 = type("Int32", function (v) {
  if (isNumber(v) && isInteger(v)) {
    numberValuesDeprecationNotice("Int32");
    return {
      type: "Int32",
      value: v.toString()
    };
  }

  if (isString(v)) {
    return {
      type: "Int32",
      value: v
    };
  }

  throwTypeError("Expected positive integer for Int32");
}, function (v) {
  return v;
});
var UInt64 = type("UInt64", function (v) {
  if (isNumber(v) && isInteger(v)) {
    numberValuesDeprecationNotice("UInt64");
    return {
      type: "UInt64",
      value: v.toString()
    };
  }

  if (isString(v)) {
    return {
      type: "UInt64",
      value: v
    };
  }

  throwTypeError("Expected integer for UInt64");
}, function (v) {
  return v;
});
var Int64 = type("Int64", function (v) {
  if (isNumber(v) && isInteger(v)) {
    numberValuesDeprecationNotice("Int64");
    return {
      type: "Int64",
      value: v.toString()
    };
  }

  if (isString(v)) {
    return {
      type: "Int64",
      value: v
    };
  }

  throwTypeError("Expected positive integer for Int64");
}, function (v) {
  return v;
});
var UInt128 = type("UInt128", function (v) {
  if (isNumber(v) && isInteger(v)) {
    numberValuesDeprecationNotice("UInt128");
    return {
      type: "UInt128",
      value: v.toString()
    };
  }

  if (isString(v)) {
    return {
      type: "UInt128",
      value: v
    };
  }

  throwTypeError("Expected integer for UInt128");
}, function (v) {
  return v;
});
var Int128 = type("Int128", function (v) {
  if (isNumber(v) && isInteger(v)) {
    numberValuesDeprecationNotice("Int128");
    return {
      type: "Int128",
      value: v.toString()
    };
  }

  if (isString(v)) {
    return {
      type: "Int128",
      value: v
    };
  }

  throwTypeError("Expected positive integer for Int128");
}, function (v) {
  return v;
});
var UInt256 = type("UInt256", function (v) {
  if (isNumber(v) && isInteger(v)) {
    numberValuesDeprecationNotice("UInt256");
    return {
      type: "UInt256",
      value: v.toString()
    };
  }

  if (isString(v)) {
    return {
      type: "UInt256",
      value: v
    };
  }

  throwTypeError("Expected integer for UInt256");
}, function (v) {
  return v;
});
var Int256 = type("Int256", function (v) {
  if (isNumber(v) && isInteger(v)) {
    numberValuesDeprecationNotice("Int256");
    return {
      type: "Int256",
      value: v.toString()
    };
  }

  if (isString(v)) {
    return {
      type: "Int256",
      value: v
    };
  }

  throwTypeError("Expected integer for Int256");
}, function (v) {
  return v;
});
var Word8 = type("Word8", function (v) {
  if (isNumber(v) && isInteger(v)) {
    numberValuesDeprecationNotice("Word8");
    return {
      type: "Word8",
      value: v.toString()
    };
  }

  if (isString(v)) {
    return {
      type: "Word8",
      value: v
    };
  }

  throwTypeError("Expected positive number for Word8");
}, function (v) {
  return v;
});
var Word16 = type("Word16", function (v) {
  if (isNumber(v) && isInteger(v)) {
    numberValuesDeprecationNotice("Word16");
    return {
      type: "Word16",
      value: v.toString()
    };
  }

  if (isString(v)) {
    return {
      type: "Word16",
      value: v
    };
  }

  throwTypeError("Expected positive number for Word16");
}, function (v) {
  return v;
});
var Word32 = type("Word32", function (v) {
  if (isNumber(v) && isInteger(v)) {
    numberValuesDeprecationNotice("Word32");
    return {
      type: "Word32",
      value: v.toString()
    };
  }

  if (isString(v)) {
    return {
      type: "Word32",
      value: v
    };
  }

  throwTypeError("Expected positive number for Word32");
}, function (v) {
  return v;
});
var Word64 = type("Word64", function (v) {
  if (isNumber(v) && isInteger(v)) {
    numberValuesDeprecationNotice("Word64");
    return {
      type: "Word64",
      value: v.toString()
    };
  }

  if (isString(v)) {
    return {
      type: "Word64",
      value: v
    };
  }

  throwTypeError("Expected positive number for Word64");
}, function (v) {
  return v;
});

var UFix64AndFix64NumberDeprecationNotice = function UFix64AndFix64NumberDeprecationNotice() {
  log.deprecate({
    subject: "Passing in Numbers as values for Fix64 and UFix64 types",
    pkg: "@onflow/types",
    transition: "https://github.com/onflow/flow-js-sdk/blob/master/packages/types/WARNINGS.md#0001-[U]Fix64-as-Number"
  });
};

var UFix64 = type("UFix64", function (v) {
  if (isString(v)) {
    var vParts = v.split(".");

    if (vParts.length !== 2) {
      throwTypeError("Expected one decimal but found ".concat(vParts.length, " in the [U]Fix64 value. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers"));
    }

    if (vParts[1].length == 0 || vParts[1].length > 8) {
      throwTypeError("Expected at least one digit, and at most 8 digits following the decimal of the [U]Fix64 value but found ".concat(vParts[1].length, " digits. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers"));
    } // make sure the number is extended to 8 decimal places so it matches cadence encoding of UFix values


    vParts[1] = vParts[1].padEnd(8, "0");
    v = vParts.join(".");
    return {
      type: "UFix64",
      value: v
    };
  } else if (isNumber(v)) {
    UFix64AndFix64NumberDeprecationNotice();
    return {
      type: "UFix64",
      value: v.toString()
    };
  }

  throwTypeError("Expected String for UFix64");
}, function (v) {
  return v;
});
var Fix64 = type("Fix64", function (v) {
  if (isString(v)) {
    var vParts = v.split(".");

    if (vParts.length !== 2) {
      throwTypeError("Expected one decimal but found ".concat(vParts.length, " in the [U]Fix64 value. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers"));
    }

    if (vParts[1].length == 0 || vParts[1].length > 8) {
      throwTypeError("Expected at least one digit, and at most 8 digits following the decimal of the [U]Fix64 value but found ".concat(vParts[1].length, " digits. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers"));
    } // make sure the number is extended to 8 decimal places so it matches cadence encoding of Fix64 values


    vParts[1] = vParts[1].padEnd(8, "0");
    v = vParts.join(".");
    return {
      type: "Fix64",
      value: v
    };
  } else if (isNumber(v)) {
    UFix64AndFix64NumberDeprecationNotice();
    return {
      type: "Fix64",
      value: v.toString()
    };
  }

  throwTypeError("Expected String for Fix64");
}, function (v) {
  return v;
});
var String = type("String", function (v) {
  if (isString(v)) return {
    type: "String",
    value: v
  };
  throwTypeError("Expected String for type String");
}, function (v) {
  return v;
});
var Character = type("Character", function (v) {
  if (isString(v)) return {
    type: "Character",
    value: v
  };
  throwTypeError("Expected Character for type Character");
}, function (v) {
  return v;
});
var Bool = type("Bool", function (v) {
  if (isBoolean(v)) return {
    type: "Bool",
    value: v
  };
  throwTypeError("Expected Boolean for type Bool");
}, function (v) {
  return v;
});
var Address = type("Address", function (v) {
  if (isString(v)) return {
    type: "Address",
    value: v
  };
  throwTypeError("Expected Address for type Address");
}, function (v) {
  return v;
});
var Void = type("Void", function (v) {
  if (!v || isNull(v)) return {
    type: "Void"
  };
  throwTypeError("Expected Void for type Void");
}, function (v) {
  return v;
});
var Optional = function Optional(children) {
  return type("Optional", function (v) {
    return {
      type: "Optional",
      value: isNull(v) ? null : children.asArgument(v)
    };
  }, function (v) {
    return v;
  });
};
var Reference = type("Reference", function (v) {
  if (isObj(v)) return {
    type: "Reference",
    value: v
  };
  throwTypeError("Expected Object for type Reference");
}, function (v) {
  return v;
});
var _Array = function _Array() {
  var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return type("Array", function (v) {
    return {
      type: "Array",
      value: isArray(children) ? children.map(function (c, i) {
        return c.asArgument(v[i]);
      }) : v.map(function (x) {
        return children.asArgument(x);
      })
    };
  }, function (v) {
    return v;
  });
};
var Dictionary = function Dictionary() {
  var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return type("Dictionary", function (v) {
    if (isObj(v)) return {
      type: "Dictionary",
      value: isArray(children) ? children.map(function (c, i) {
        return {
          key: c.key.asArgument(v[i].key),
          value: c.value.asArgument(v[i].value)
        };
      }) : isArray(v) ? v.map(function (x) {
        return {
          key: children.key.asArgument(x.key),
          value: children.value.asArgument(x.value)
        };
      }) : [{
        key: children.key.asArgument(v.key),
        value: children.value.asArgument(v.value)
      }]
    };
    throwTypeError("Expected Object for type Dictionary");
  }, function (v) {
    return v;
  });
};
var Event = function Event(id) {
  var fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return type("Event", function (v) {
    if (isObj(v)) return {
      type: "Event",
      value: {
        id: id,
        fields: isArray(fields) ? fields.map(function (c, i) {
          return {
            name: v.fields[i].name,
            value: c.value.asArgument(v.fields[i].value)
          };
        }) : v.fields.map(function (x) {
          return {
            name: x.name,
            value: fields.value.asArgument(x.value)
          };
        })
      }
    };
    throwTypeError("Expected Object for type Event");
  }, function (v) {
    return v;
  });
};
var Resource = function Resource(id) {
  var fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return type("Resource", function (v) {
    if (isObj(v)) return {
      type: "Resource",
      value: {
        id: id,
        fields: isArray(fields) ? fields.map(function (c, i) {
          return {
            name: v.fields[i].name,
            value: c.value.asArgument(v.fields[i].value)
          };
        }) : v.fields.map(function (x) {
          return {
            name: x.name,
            value: fields.value.asArgument(x.value)
          };
        })
      }
    };
    throwTypeError("Expected Object for type Resource");
  }, function (v) {
    return v;
  });
};
var Struct = function Struct(id) {
  var fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return type("Struct", function (v) {
    if (isObj(v)) return {
      type: "Struct",
      value: {
        id: id,
        fields: isArray(fields) ? fields.map(function (c, i) {
          return {
            name: v.fields[i].name,
            value: c.value.asArgument(v.fields[i].value)
          };
        }) : v.fields.map(function (x) {
          return {
            name: x.name,
            value: fields.value.asArgument(x.value)
          };
        })
      }
    };
    throwTypeError("Expected Object for type Struct");
  }, function (v) {
    return v;
  });
};
var Enum = function Enum(id) {
  var fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return type("Enum", function (v) {
    if (isObj(v)) return {
      type: "Enum",
      value: {
        id: id,
        fields: isArray(fields) ? fields.map(function (c, i) {
          return {
            name: v.fields[i].name,
            value: c.value.asArgument(v.fields[i].value)
          };
        }) : v.fields.map(function (x) {
          return {
            name: x.name,
            value: fields.value.asArgument(x.value)
          };
        })
      }
    };
    throwTypeError("Expected Object for type Enum");
  }, function (v) {
    return v;
  });
};
var Path = type("Path", function (v) {
  if (isObj(v)) {
    if (!isString(v.domain)) {
      throwTypeError("Expected a string for the Path domain but found ".concat(v.domain, ". Find out more about the Path type here: https://docs.onflow.org/cadence/json-cadence-spec/#path"));
    }

    if (!(v.domain === "storage" || v.domain === "private" || v.domain === "public")) {
      throwTypeError("Expected either \"storage\", \"private\" or \"public\" as the Path domain but found ".concat(v.domain, ". Find out more about the Path type here: https://docs.onflow.org/cadence/json-cadence-spec/#path"));
    }

    if (!isString(v.identifier)) {
      throwTypeError("Expected a string for the Path identifier but found ".concat(v.identifier, ". Find out more about the Path type here: https://docs.onflow.org/cadence/json-cadence-spec/#path"));
    }

    return {
      type: "Path",
      value: {
        domain: v.domain,
        identifier: v.identifier
      }
    };
  }

  throwTypeError("Expected Object for type Path");
}, function (v) {
  return v;
});

exports.Address = Address;
exports.Array = _Array;
exports.Bool = Bool;
exports.Character = Character;
exports.Dictionary = Dictionary;
exports.Enum = Enum;
exports.Event = Event;
exports.Fix64 = Fix64;
exports.Identity = Identity;
exports.Int = Int;
exports.Int128 = Int128;
exports.Int16 = Int16;
exports.Int256 = Int256;
exports.Int32 = Int32;
exports.Int64 = Int64;
exports.Int8 = Int8;
exports.Optional = Optional;
exports.Path = Path;
exports.Reference = Reference;
exports.Resource = Resource;
exports.String = String;
exports.Struct = Struct;
exports.UFix64 = UFix64;
exports.UInt = UInt;
exports.UInt128 = UInt128;
exports.UInt16 = UInt16;
exports.UInt256 = UInt256;
exports.UInt32 = UInt32;
exports.UInt64 = UInt64;
exports.UInt8 = UInt8;
exports.Void = Void;
exports.Word16 = Word16;
exports.Word32 = Word32;
exports.Word64 = Word64;
exports.Word8 = Word8;
exports._Array = _Array;
//# sourceMappingURL=types.js.map
