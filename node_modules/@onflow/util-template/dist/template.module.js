import _toArray from '@babel/runtime/helpers/toArray';
import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';
import _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';
import _regeneratorRuntime from '@babel/runtime/regenerator';
import _typeof from '@babel/runtime/helpers/typeof';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import _createForOfIteratorHelper from '@babel/runtime/helpers/createForOfIteratorHelper';

var promise;
var queueMicrotask_1 = typeof queueMicrotask === 'function' ? queueMicrotask // reuse resolved promise, and allocate it lazily
: function (cb) {
  return (promise || (promise = Promise.resolve())).then(cb)["catch"](function (err) {
    return setTimeout(function () {
      throw err;
    }, 0);
  });
};

var mailbox = function mailbox() {
  var queue = [];
  var next;
  return {
    deliver: function deliver(msg) {
      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                queue.push(msg);

                if (next) {
                  next(queue.shift());
                  next = undefined;
                }

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    },
    receive: function receive() {
      return new Promise(function innerReceive(resolve) {
        var msg = queue.shift();
        if (msg) return resolve(msg);
        next = resolve;
      });
    }
  };
};

var INIT = "INIT";
var SUBSCRIBE = "SUBSCRIBE";
var UNSUBSCRIBE = "UNSUBSCRIBE";
var UPDATED$1 = "UPDATED";
var EXIT = "EXIT";
var TERMINATE = "TERMINATE";
var root = (typeof self === "undefined" ? "undefined" : _typeof(self)) === "object" && self.self === self && self || (typeof global === "undefined" ? "undefined" : _typeof(global)) === "object" && global.global === global && global || (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" && window.window === window && window;
root.FCL_REGISTRY = root.FCL_REGISTRY == null ? {} : root.FCL_REGISTRY;
var pid = 0;
var DEFAULT_TIMEOUT = 5000;

var _send = function send(addr, tag, data) {
  var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  return new Promise(function (reply, reject) {
    var expectReply = opts.expectReply || false;
    var timeout = opts.timeout != null ? opts.timeout : DEFAULT_TIMEOUT;

    if (expectReply && timeout) {
      setTimeout(function () {
        return reject(new Error("Timeout: ".concat(timeout, "ms passed without a response.")));
      }, timeout);
    }

    var payload = {
      to: addr,
      from: opts.from,
      tag: tag,
      data: data,
      timeout: timeout,
      reply: reply,
      reject: reject
    };

    try {
      root.FCL_REGISTRY[addr] && root.FCL_REGISTRY[addr].mailbox.deliver(payload);
      if (!expectReply) reply(true);
    } catch (error) {
      console.error("FCL.Actor -- Could Not Deliver Message", payload, root.FCL_REGISTRY[addr], error);
    }
  });
};

var kill = function kill(addr) {
  delete root.FCL_REGISTRY[addr];
};

var fromHandlers = function fromHandlers() {
  var handlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {
      var letter;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(typeof handlers[INIT] === "function")) {
                _context.next = 3;
                break;
              }

              _context.next = 3;
              return handlers[INIT](ctx);

            case 3:
              _context.next = 6;
              return ctx.receive();

            case 6:
              letter = _context.sent;
              _context.prev = 7;

              if (!(letter.tag === EXIT)) {
                _context.next = 13;
                break;
              }

              if (!(typeof handlers[TERMINATE] === "function")) {
                _context.next = 12;
                break;
              }

              _context.next = 12;
              return handlers[TERMINATE](ctx, letter, letter.data || {});

            case 12:
              return _context.abrupt("break", 25);

            case 13:
              _context.next = 15;
              return handlers[letter.tag](ctx, letter, letter.data || {});

            case 15:
              _context.next = 20;
              break;

            case 17:
              _context.prev = 17;
              _context.t0 = _context["catch"](7);
              console.error("".concat(ctx.self(), " Error"), letter, _context.t0);

            case 20:
              _context.prev = 20;
              return _context.abrupt("continue", 3);

            case 23:
              _context.next = 3;
              break;

            case 25:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[7, 17, 20, 23]]);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }();
};

var spawn = function spawn(fn) {
  var addr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  if (addr == null) addr = ++pid;
  if (root.FCL_REGISTRY[addr] != null) return addr;
  root.FCL_REGISTRY[addr] = {
    addr: addr,
    mailbox: mailbox(),
    subs: new Set(),
    kvs: {},
    error: null
  };
  var ctx = {
    self: function self() {
      return addr;
    },
    receive: function receive() {
      return root.FCL_REGISTRY[addr].mailbox.receive();
    },
    send: function send(to, tag, data) {
      var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      opts.from = addr;
      return _send(to, tag, data, opts);
    },
    sendSelf: function sendSelf(tag, data, opts) {
      if (root.FCL_REGISTRY[addr]) _send(addr, tag, data, opts);
    },
    broadcast: function broadcast(tag, data) {
      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      opts.from = addr;

      var _iterator = _createForOfIteratorHelper(root.FCL_REGISTRY[addr].subs),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var to = _step.value;

          _send(to, tag, data, opts);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    },
    subscribe: function subscribe(sub) {
      return sub != null && root.FCL_REGISTRY[addr].subs.add(sub);
    },
    unsubscribe: function unsubscribe(sub) {
      return sub != null && root.FCL_REGISTRY[addr].subs["delete"](sub);
    },
    subscriberCount: function subscriberCount() {
      return root.FCL_REGISTRY[addr].subs.size;
    },
    hasSubs: function hasSubs() {
      return !!root.FCL_REGISTRY[addr].subs.size;
    },
    put: function put(key, value) {
      if (key != null) root.FCL_REGISTRY[addr].kvs[key] = value;
    },
    get: function get(key, fallback) {
      var value = root.FCL_REGISTRY[addr].kvs[key];
      return value == null ? fallback : value;
    },
    "delete": function _delete(key) {
      delete root.FCL_REGISTRY[addr].kvs[key];
    },
    update: function update(key, fn) {
      if (key != null) root.FCL_REGISTRY[addr].kvs[key] = fn(root.FCL_REGISTRY[addr].kvs[key]);
    },
    keys: function keys() {
      return Object.keys(root.FCL_REGISTRY[addr].kvs);
    },
    all: function all() {
      return root.FCL_REGISTRY[addr].kvs;
    },
    where: function where(pattern) {
      return Object.keys(root.FCL_REGISTRY[addr].kvs).reduce(function (acc, key) {
        return pattern.test(key) ? _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, key, root.FCL_REGISTRY[addr].kvs[key])) : acc;
      }, {});
    },
    merge: function merge() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      Object.keys(data).forEach(function (key) {
        return root.FCL_REGISTRY[addr].kvs[key] = data[key];
      });
    },
    fatalError: function fatalError(error) {
      root.FCL_REGISTRY[addr].error = error;

      var _iterator2 = _createForOfIteratorHelper(root.FCL_REGISTRY[addr].subs),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var to = _step2.value;

          _send(to, UPDATED$1);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  };
  if (_typeof(fn) === "object") fn = fromHandlers(fn);
  queueMicrotask_1( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return fn(ctx);

          case 2:
            kill(addr);

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })));
  return addr;
}; // Returns an unsubscribe function
// A SUBSCRIBE handler will need to be created to handle the subscription event
//
//  [SUBSCRIBE]: (ctx, letter) => {
//    ctx.subscribe(letter.from)
//    ctx.send(letter.from, UPDATED, ctx.all())
//  }
//


function subscriber(address, spawnFn, callback) {
  spawnFn(address);
  var EXIT = "@EXIT";
  var self = spawn( /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(ctx) {
      var letter, error;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              ctx.send(address, SUBSCRIBE);

            case 1:
              _context3.next = 4;
              return ctx.receive();

            case 4:
              letter = _context3.sent;
              error = root.FCL_REGISTRY[address].error;

              if (!(letter.tag === EXIT)) {
                _context3.next = 9;
                break;
              }

              ctx.send(address, UNSUBSCRIBE);
              return _context3.abrupt("return");

            case 9:
              if (!error) {
                _context3.next = 13;
                break;
              }

              callback(null, error);
              ctx.send(address, UNSUBSCRIBE);
              return _context3.abrupt("return");

            case 13:
              callback(letter.data, null);
              _context3.next = 1;
              break;

            case 16:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x2) {
      return _ref3.apply(this, arguments);
    };
  }());
  return function () {
    return _send(self, EXIT);
  };
} // Returns a promise that returns a result

var _HANDLERS;

var NAME = "config";
var PUT = "PUT_CONFIG";
var GET = "GET_CONFIG";
var GET_ALL = "GET_ALL_CONFIG";
var UPDATE = "UPDATE_CONFIG";
var DELETE = "DELETE_CONFIG";
var CLEAR = "CLEAR_CONFIG";
var WHERE = "WHERE_CONFIG";
var UPDATED = "CONFIG/UPDATED";

var identity = function identity(v) {
  return v;
};

var HANDLERS = (_HANDLERS = {}, _defineProperty(_HANDLERS, PUT, function (ctx, _letter, _ref) {
  var key = _ref.key,
      value = _ref.value;
  if (key == null) throw new Error("Missing 'key' for config/put.");
  ctx.put(key, value);
  ctx.broadcast(UPDATED, _objectSpread({}, ctx.all()));
}), _defineProperty(_HANDLERS, GET, function (ctx, letter, _ref2) {
  var key = _ref2.key,
      fallback = _ref2.fallback;
  if (key == null) throw new Error("Missing 'key' for config/get");
  letter.reply(ctx.get(key, fallback));
}), _defineProperty(_HANDLERS, GET_ALL, function (ctx, letter) {
  letter.reply(_objectSpread({}, ctx.all()));
}), _defineProperty(_HANDLERS, UPDATE, function (ctx, letter, _ref3) {
  var key = _ref3.key,
      fn = _ref3.fn;
  if (key == null) throw new Error("Missing 'key' for config/update");
  ctx.update(key, fn || identity);
  ctx.broadcast(UPDATED, _objectSpread({}, ctx.all()));
}), _defineProperty(_HANDLERS, DELETE, function (ctx, letter, _ref4) {
  var key = _ref4.key;
  if (key == null) throw new Error("Missing 'key' for config/delete");
  ctx["delete"](key);
  ctx.broadcast(UPDATED, _objectSpread({}, ctx.all()));
}), _defineProperty(_HANDLERS, CLEAR, function (ctx, letter) {
  var keys = Object.keys(ctx.all());

  for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {
    var key = _keys[_i];
    ctx["delete"](key);
  }

  ctx.broadcast(UPDATED, _objectSpread({}, ctx.all()));
}), _defineProperty(_HANDLERS, WHERE, function (ctx, letter, _ref5) {
  var pattern = _ref5.pattern;
  if (pattern == null) throw new Error("Missing 'pattern' for config/where");
  letter.reply(ctx.where(pattern));
}), _defineProperty(_HANDLERS, SUBSCRIBE, function (ctx, letter) {
  ctx.subscribe(letter.from);
  ctx.send(letter.from, UPDATED, _objectSpread({}, ctx.all()));
}), _defineProperty(_HANDLERS, UNSUBSCRIBE, function (ctx, letter) {
  ctx.unsubscribe(letter.from);
}), _HANDLERS);
spawn(HANDLERS, NAME);

function put(key, value) {
  _send(NAME, PUT, {
    key: key,
    value: value
  });
  return config();
}

function get(key, fallback) {
  return _send(NAME, GET, {
    key: key,
    fallback: fallback
  }, {
    expectReply: true,
    timeout: 10
  });
}

function first() {
  return _first.apply(this, arguments);
}

function _first() {
  _first = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    var wants,
        fallback,
        _wants,
        head,
        rest,
        ret,
        _args2 = arguments;

    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            wants = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : [];
            fallback = _args2.length > 1 ? _args2[1] : undefined;

            if (wants.length) {
              _context2.next = 4;
              break;
            }

            return _context2.abrupt("return", fallback);

          case 4:
            _wants = _toArray(wants), head = _wants[0], rest = _wants.slice(1);
            _context2.next = 7;
            return get(head);

          case 7:
            ret = _context2.sent;

            if (!(ret == null)) {
              _context2.next = 10;
              break;
            }

            return _context2.abrupt("return", first(rest, fallback));

          case 10:
            return _context2.abrupt("return", ret);

          case 11:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _first.apply(this, arguments);
}

function all() {
  return _send(NAME, GET_ALL, null, {
    expectReply: true,
    timeout: 10
  });
}

function update(key) {
  var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity;
  _send(NAME, UPDATE, {
    key: key,
    fn: fn
  });
  return config();
}

function _delete(key) {
  _send(NAME, DELETE, {
    key: key
  });
  return config();
}

function where(pattern) {
  return _send(NAME, WHERE, {
    pattern: pattern
  }, {
    expectReply: true,
    timeout: 10
  });
}

function subscribe(callback) {
  return subscriber(NAME, function () {
    return spawn(HANDLERS, NAME);
  }, callback);
}

function clearConfig() {
  return _send(NAME, CLEAR);
}

function config(values) {
  if (values != null && _typeof(values) === "object") {
    Object.keys(values).map(function (d) {
      return put(d, values[d]);
    });
  }

  return {
    put: put,
    get: get,
    all: all,
    first: first,
    update: update,
    "delete": _delete,
    where: where,
    subscribe: subscribe,
    overload: overload
  };
}

config.put = put;
config.get = get;
config.all = all;
config.first = first;
config.update = update;
config["delete"] = _delete;
config.where = where;
config.subscribe = subscribe;
config.overload = overload;

var noop = function noop(v) {
  return v;
};

function overload() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
  return new Promise( /*#__PURE__*/function () {
    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(resolve, reject) {
      var oldConfig, result;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return all();

            case 2:
              oldConfig = _context.sent;
              _context.prev = 3;
              config(opts);
              _context.t0 = callback;
              _context.next = 8;
              return all();

            case 8:
              _context.t1 = _context.sent;
              _context.next = 11;
              return (0, _context.t0)(_context.t1);

            case 11:
              result = _context.sent;
              _context.next = 14;
              return clearConfig();

            case 14:
              _context.next = 16;
              return config(oldConfig);

            case 16:
              resolve(result);
              _context.next = 26;
              break;

            case 19:
              _context.prev = 19;
              _context.t2 = _context["catch"](3);
              _context.next = 23;
              return clearConfig();

            case 23:
              _context.next = 25;
              return config(oldConfig);

            case 25:
              reject(_context.t2);

            case 26:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[3, 19]]);
    }));

    return function (_x, _x2) {
      return _ref6.apply(this, arguments);
    };
  }());
}

var LEVELS = Object.freeze({
  debug: 5,
  info: 4,
  log: 3,
  warn: 2,
  error: 1
});

var buildLoggerMessageArgs = function buildLoggerMessageArgs(_ref) {
  var title = _ref.title,
      message = _ref.message;
  return ["\n    %c".concat(title, "\n    ============================\n\n    ").concat(message, "\n\n    ============================\n    ").replace(/\n[^\S\r\n]+/g, "\n").trim(),, "font-weight:bold;font-family:monospace;"];
};

var log = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {
    var _console, _console2, _console3, _console4, _console5;

    var title, message, level, _ref2$always, always, configLoggerLevel, loggerMessageArgs;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            title = _ref2.title, message = _ref2.message, level = _ref2.level, _ref2$always = _ref2.always, always = _ref2$always === void 0 ? false : _ref2$always;
            _context.next = 3;
            return config.get("logger.level", LEVELS.warn);

          case 3:
            configLoggerLevel = _context.sent;

            if (!(!always && configLoggerLevel < level)) {
              _context.next = 6;
              break;
            }

            return _context.abrupt("return");

          case 6:
            loggerMessageArgs = buildLoggerMessageArgs({
              title: title,
              message: message
            });
            _context.t0 = level;
            _context.next = _context.t0 === LEVELS.debug ? 10 : _context.t0 === LEVELS.info ? 12 : _context.t0 === LEVELS.warn ? 14 : _context.t0 === LEVELS.error ? 16 : 18;
            break;

          case 10:
            (_console = console).debug.apply(_console, _toConsumableArray(loggerMessageArgs));

            return _context.abrupt("break", 19);

          case 12:
            (_console2 = console).info.apply(_console2, _toConsumableArray(loggerMessageArgs));

            return _context.abrupt("break", 19);

          case 14:
            (_console3 = console).warn.apply(_console3, _toConsumableArray(loggerMessageArgs));

            return _context.abrupt("break", 19);

          case 16:
            (_console4 = console).error.apply(_console4, _toConsumableArray(loggerMessageArgs));

            return _context.abrupt("break", 19);

          case 18:
            (_console5 = console).log.apply(_console5, _toConsumableArray(loggerMessageArgs));

          case 19:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function log(_x) {
    return _ref3.apply(this, arguments);
  };
}();

log.deprecate = function (_ref4) {
  var pkg = _ref4.pkg,
      subject = _ref4.subject,
      transition = _ref4.transition,
      _ref4$level = _ref4.level,
      level = _ref4$level === void 0 ? LEVELS.warn : _ref4$level,
      _ref4$message = _ref4.message,
      message = _ref4$message === void 0 ? "" : _ref4$message,
      _ref4$callback = _ref4.callback,
      callback = _ref4$callback === void 0 ? null : _ref4$callback;

  var capitalizeFirstLetter = function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  };

  var logMessage = function logMessage() {
    return log({
      title: "".concat(pkg ? pkg + " " : "", "Deprecation Notice"),
      message: "\n      ".concat(subject ? "".concat(capitalizeFirstLetter(subject), " is deprecated and will cease to work in future releases").concat(pkg ? " of " + pkg : "", ".") : "").concat(message ? "\n" + message : "").concat(transition ? "\nYou can learn more (including a guide on common transition paths) here: ".concat(transition) : "", "\n    ").trim(),
      level: level
    });
  };

  if (typeof callback === "function") {
    return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
      var _args2 = arguments;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return logMessage();

            case 2:
              _context2.next = 4;
              return callback.apply(void 0, _args2);

            case 4:
              return _context2.abrupt("return", _context2.sent);

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
  }

  return logMessage();
};

function interleave() {
  var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  if (!a.length && !b.length) return c;
  if (!a.length) return c;
  if (!b.length) return [].concat(_toConsumableArray(c), [a[0]]);

  var _a = _toArray(a),
      aHead = _a[0],
      aRest = _a.slice(1);

  var _b = _toArray(b),
      bHead = _b[0],
      bRest = _b.slice(1);

  if (aHead !== undefined) c.push(aHead);
  if (bHead !== undefined) c.push(bHead);
  return interleave(aRest, bRest, c);
}

function recApply(d) {
  return function (arg1) {
    if (typeof arg1 === "function") {
      log.deprecate({
        pkg: "FCL/SDK",
        subject: "Interopolation of functions into template literals",
        transition: "https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0001-deprecate-params"
      });
      return recApply(d)(arg1(d));
    }

    return String(arg1);
  };
}

function template(head) {
  for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    rest[_key - 1] = arguments[_key];
  }

  if (typeof head === "string") return function () {
    return head;
  };

  if (Array.isArray(head)) {
    return function (d) {
      return interleave(head, rest.map(recApply(d))).join("").trim();
    };
  }

  return head;
}

export { interleave, template };
//# sourceMappingURL=template.module.js.map
