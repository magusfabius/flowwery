{"version":3,"file":"sdk-send-http.js","sources":["../src/http-request.js","../src/send-execute-script.js","../src/send-get-account.js","../src/send-get-block-header.js","../src/send-get-block.js","../src/send-get-collection.js","../src/send-get-events.js","../src/send-get-transaction.js","../src/send-get-transaction-status.js","../src/send-ping.js","../src/send-transaction.js","../src/send-http.js"],"sourcesContent":["import * as logger from \"@onflow/util-logger\"\nimport fetchTransport from \"node-fetch\"\n\nclass HTTPRequestError extends Error {\n  constructor({\n    error,\n    hostname,\n    path,\n    method,\n    requestBody,\n    responseBody,\n    responseStatusText,\n    statusCode,\n  }) {\n    const msg = `\n      HTTP Request Error: An error occurred when interacting with the Access API.\n      ${error ? `error=${error}` : \"\"}\n      ${hostname ? `hostname=${hostname}` : \"\"}\n      ${path ? `path=${path}` : \"\"}\n      ${method ? `method=${method}` : \"\"}\n      ${requestBody ? `requestBody=${requestBody}` : \"\"}\n      ${responseBody ? `responseBody=${responseBody}` : \"\"}\n      ${responseStatusText ? `responseStatusText=${responseStatusText}` : \"\"}\n      ${statusCode ? `statusCode=${statusCode}` : \"\"}\n    `\n    super(msg)\n\n    this.name = \"HTTP Request Error\"\n    this.statusCode = statusCode\n    this.errorMessage = error\n  }\n}\n\n/**\n * Creates an HTTP Request to be sent to a REST Access API via Fetch API.\n *\n * @param {Object} options - Options for the HTTP Request\n * @param {String} options.hostname - Access API Hostname\n * @param {String} options.path - Path to the resource on the Access API\n * @param {String} options.method - HTTP Method\n * @param {Object} options.body - HTTP Request Body\n * @param {Object | Headers} [options.headers] - HTTP Request Headers\n *\n * @returns JSON object response from Access API.\n */\nexport async function httpRequest({\n  hostname,\n  path,\n  method,\n  body,\n  headers,\n  retryLimit = 5,\n  retryIntervalMs = 1000,\n}) {\n  const bodyJSON = body ? JSON.stringify(body) : null\n\n  function makeRequest() {\n    return fetchTransport(`${hostname}${path}`, {\n      method: method,\n      body: bodyJSON,\n      headers,\n    })\n      .then(async res => {\n        if (res.ok) {\n          return res.json()\n        }\n\n        const responseText = res.body ? await res.text() : null\n        const response = safeParseJSON(responseText)\n\n        throw new HTTPRequestError({\n          error: response?.message,\n          hostname,\n          path,\n          method,\n          requestBody: bodyJSON,\n          responseBody: responseText,\n          responseStatusText: res.statusText,\n          statusCode: res.status,\n        })\n      })\n      .catch(async e => {\n        if (e instanceof HTTPRequestError) {\n          throw e\n        }\n\n        // Show AN error for all network errors\n        await logger.log({\n          title: \"Access Node Error\",\n          message: `The provided access node ${hostname} does not appear to be a valid REST/HTTP access node.\nPlease verify that you are not unintentionally using a GRPC access node.\nSee more here: https://docs.onflow.org/fcl/reference/sdk-guidelines/#connect`,\n          level: logger.LEVELS.error,\n        })\n\n        throw new HTTPRequestError({\n          error: e?.message,\n          hostname,\n          path,\n          method,\n          requestBody: bodyJSON,\n        })\n      })\n  }\n\n  async function requestLoop(retryAttempt = 0) {\n    try {\n      const resp = await makeRequest()\n      return resp\n    } catch (error) {\n      const retryStatusCodes = [408, 429, 500, 502, 503, 504]\n\n      if (retryStatusCodes.includes(error.statusCode)) {\n        return await new Promise((resolve, reject) => {\n          if (retryAttempt < retryLimit) {\n            console.warn(\n              `Access node unavailable, retrying in ${retryIntervalMs} ms...`\n            )\n            setTimeout(() => {\n              resolve(requestLoop(retryAttempt + 1))\n            }, retryIntervalMs)\n          } else {\n            reject(error)\n          }\n        })\n      } else {\n        throw error\n      }\n    }\n  }\n\n  // Keep retrying request until server available or max attempts exceeded\n  return await requestLoop()\n}\n\nfunction safeParseJSON(data) {\n  try {\n    return JSON.parse(data)\n  } catch {\n    return null\n  }\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {Buffer} from \"@onflow/rlp\"\nimport {httpRequest as defaultHttpRequest} from \"./http-request.js\"\n\nasync function sendExecuteScriptAtBlockIDRequest(ix, context, opts) {\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/scripts?block_id=${ix.block.id}`,\n    method: \"POST\",\n    body: {\n      script: context.Buffer.from(ix.message.cadence).toString(\"base64\"),\n      arguments: ix.message.arguments.map(arg =>\n        context.Buffer.from(\n          JSON.stringify(ix.arguments[arg].asArgument)\n        ).toString(\"base64\")\n      ),\n    },\n  })\n\n  return constructResponse(ix, context, res)\n}\n\nasync function sendExecuteScriptAtBlockHeightRequest(ix, context, opts) {\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/scripts?block_height=${ix.block.height}`,\n    method: \"POST\",\n    body: {\n      script: context.Buffer.from(ix.message.cadence).toString(\"base64\"),\n      arguments: ix.message.arguments.map(arg =>\n        context.Buffer.from(\n          JSON.stringify(ix.arguments[arg].asArgument)\n        ).toString(\"base64\")\n      ),\n    },\n  })\n\n  return constructResponse(ix, context, res)\n}\n\nasync function sendExecuteScriptAtLatestBlockRequest(ix, context, opts) {\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/scripts?block_height=sealed`,\n    method: \"POST\",\n    body: {\n      script: context.Buffer.from(ix.message.cadence).toString(\"base64\"),\n      arguments: ix.message.arguments.map(arg =>\n        context.Buffer.from(\n          JSON.stringify(ix.arguments[arg].asArgument)\n        ).toString(\"base64\")\n      ),\n    },\n  })\n\n  return constructResponse(ix, context, res)\n}\n\nfunction constructResponse(ix, context, res) {\n  let ret = context.response()\n  ret.tag = ix.tag\n\n  ret.encodedData = JSON.parse(context.Buffer.from(res, \"base64\").toString())\n\n  return ret\n}\n\nexport async function sendExecuteScript(ix, context = {}, opts = {}) {\n  invariant(\n    opts.node,\n    `SDK Send Execute Script Error: opts.node must be defined.`\n  )\n  invariant(\n    context.response,\n    `SDK Send Execute Script Error: context.response must be defined.`\n  )\n  invariant(\n    context.Buffer,\n    `SDK Send Execute Script Error: context.Buffer must be defined.`\n  )\n\n  ix = await ix\n\n  if (ix.block.id) {\n    return await sendExecuteScriptAtBlockIDRequest(ix, context, opts)\n  } else if (ix.block.height) {\n    return await sendExecuteScriptAtBlockHeightRequest(ix, context, opts)\n  } else {\n    return await sendExecuteScriptAtLatestBlockRequest(ix, context, opts)\n  }\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {httpRequest as defaultHttpRequest} from \"./http-request.js\"\n\nconst HashAlgorithmIDs = {\n  SHA2_256: 1,\n  SHA2_384: 2,\n  SHA3_256: 3,\n  SHA3_384: 4,\n  KMAC128_BLS_BLS12_381: 5,\n}\n\nconst SignatureAlgorithmIDs = {\n  ECDSA_P256: 1,\n  ECDSA_secp256k1: 2,\n  BLS_BLS12_381: 3,\n}\n\nasync function sendGetAccountAtBlockHeightRequest(ix, context, opts) {\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/accounts/${ix.account.addr}?block_height=${ix.block.height}&expand=contracts,keys`,\n    method: \"GET\",\n    body: null,\n  })\n\n  return constructResponse(ix, context, res)\n}\n\nasync function sendGetAccountAtLatestBlockRequest(ix, context, opts) {\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/accounts/${ix.account.addr}?block_height=sealed&expand=contracts,keys`,\n    method: \"GET\",\n    body: null,\n  })\n\n  return constructResponse(ix, context, res)\n}\n\nfunction constructResponse(ix, context, res) {\n  let ret = context.response()\n  ret.tag = ix.tag\n\n  const unwrapContracts = contracts => {\n    const c = {}\n    if (!contracts) return c\n    for (let key of Object.keys(contracts)) {\n      c[key] = context.Buffer.from(contracts[key], \"base64\").toString()\n    }\n    return c\n  }\n\n  ret.account = {\n    address: res.address,\n    balance: Number(res.balance),\n    code: \"\",\n    contracts: unwrapContracts(res.contracts),\n    keys:\n      res.keys?.map(key => ({\n        index: Number(key.index),\n        publicKey: key.public_key.replace(/^0x/, \"\"),\n        signAlgo: SignatureAlgorithmIDs[key.signing_algorithm],\n        signAlgoString: key.signing_algorithm,\n        hashAlgo: HashAlgorithmIDs[key.hashing_algorithm],\n        hashAlgoString: key.hashing_algorithm,\n        sequenceNumber: Number(key.sequence_number),\n        weight: Number(key.weight),\n        revoked: key.revoked,\n      })) ?? [],\n  }\n\n  return ret\n}\n\nexport async function sendGetAccount(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Get Account Error: opts.node must be defined.`)\n  invariant(\n    context.response,\n    `SDK Send Get Account Error: context.response must be defined.`\n  )\n  invariant(\n    context.Buffer,\n    `SDK Send Get Account Error: context.Buffer must be defined.`\n  )\n\n  ix = await ix\n\n  if (ix.block.height !== null) {\n    return await sendGetAccountAtBlockHeightRequest(ix, context, opts)\n  } else {\n    return await sendGetAccountAtLatestBlockRequest(ix, context, opts)\n  }\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {httpRequest as defaultHttpRequest} from \"./http-request.js\"\n\nasync function sendGetBlockHeaderByIDRequest(ix, context, opts) {\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/blocks/${ix.block.id}`,\n    method: \"GET\",\n    body: null,\n  })\n\n  return constructResponse(ix, context, res)\n}\n\nasync function sendGetBlockHeaderByHeightRequest(ix, context, opts) {\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/blocks?height=${ix.block.height}`,\n    method: \"GET\",\n    body: null,\n  })\n\n  return constructResponse(ix, context, res)\n}\n\nasync function sendGetLatestBlockHeaderRequest(ix, context, opts) {\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  const height = ix.block?.isSealed ? \"sealed\" : \"finalized\"\n\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/blocks?height=${height}`,\n    method: \"GET\",\n    body: null,\n  })\n\n  return constructResponse(ix, context, res)\n}\n\nfunction constructResponse(ix, context, res) {\n  const block = res.length ? res[0] : null\n\n  const ret = context.response()\n  ret.tag = ix.tag\n  ret.blockHeader = {\n    id: block.header.id,\n    parentId: block.header.parent_id,\n    height: Number(block.header.height),\n    timestamp: block.header.timestamp,\n  }\n\n  return ret\n}\n\nexport async function sendGetBlockHeader(ix, context = {}, opts = {}) {\n  invariant(\n    opts.node,\n    `SDK Send Get Block Header Error: opts.node must be defined.`\n  )\n  invariant(\n    context.response,\n    `SDK Send Get Block Header Error: context.response must be defined.`\n  )\n\n  ix = await ix\n\n  const interactionHasBlockID = ix.block.id !== null\n  const interactionHasBlockHeight = ix.block.height !== null\n\n  if (interactionHasBlockID) {\n    return await sendGetBlockHeaderByIDRequest(ix, context, opts)\n  } else if (interactionHasBlockHeight) {\n    return await sendGetBlockHeaderByHeightRequest(ix, context, opts)\n  } else {\n    return await sendGetLatestBlockHeaderRequest(ix, context, opts)\n  }\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {httpRequest as defaultHttpRequest} from \"./http-request.js\"\n\nasync function sendGetBlockByIDRequest(ix, context, opts) {\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/blocks/${ix.block.id}?expand=payload`,\n    method: \"GET\",\n    body: null,\n  })\n\n  return constructResponse(ix, context, res)\n}\n\nasync function sendGetBlockByHeightRequest(ix, context, opts) {\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/blocks?height=${ix.block.height}&expand=payload`,\n    method: \"GET\",\n    body: null,\n  })\n\n  return constructResponse(ix, context, res)\n}\n\nasync function sendGetBlockRequest(ix, context, opts) {\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  const height = ix.block?.isSealed ? \"sealed\" : \"final\"\n\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/blocks?height=${height}&expand=payload`,\n    method: \"GET\",\n    body: null,\n  })\n\n  return constructResponse(ix, context, res)\n}\n\nfunction constructResponse(ix, context, res) {\n  const block = res.length ? res[0] : null\n\n  const ret = context.response()\n  ret.tag = ix.tag\n  ret.block = {\n    id: block.header.id,\n    parentId: block.header.parent_id,\n    height: Number(block.header.height),\n    timestamp: block.header.timestamp,\n    collectionGuarantees: block.payload.collection_guarantees.map(\n      collectionGuarantee => ({\n        collectionId: collectionGuarantee.collection_id,\n        signerIds: collectionGuarantee.signer_ids,\n      })\n    ),\n    blockSeals: block.payload.block_seals.map(blockSeal => ({\n      blockId: blockSeal.block_id,\n      executionReceiptId: blockSeal.result_id,\n    })),\n  }\n\n  return ret\n}\n\nexport async function sendGetBlock(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Get Block Error: opts.node must be defined.`)\n  invariant(\n    context.response,\n    `SDK Send Get Block Error: context.response must be defined.`\n  )\n\n  ix = await ix\n\n  const interactionHasBlockID = ix.block.id !== null\n  const interactionHasBlockHeight = ix.block.height !== null\n\n  if (interactionHasBlockID) {\n    return await sendGetBlockByIDRequest(ix, context, opts)\n  } else if (interactionHasBlockHeight) {\n    return await sendGetBlockByHeightRequest(ix, context, opts)\n  } else {\n    return await sendGetBlockRequest(ix, context, opts)\n  }\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {httpRequest as defaultHttpRequest} from \"./http-request.js\"\n\nexport async function sendGetCollection(ix, context = {}, opts = {}) {\n  invariant(\n    opts.node,\n    `SDK Send Get Collection Error: opts.node must be defined.`\n  )\n  invariant(\n    context.response,\n    `SDK Send Get Collection Error: context.response must be defined.`\n  )\n\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/collections/${ix.collection.id}?expand=transactions`,\n    method: \"GET\",\n    body: null,\n  })\n\n  const ret = context.response()\n  ret.tag = ix.tag\n  ret.collection = {\n    id: res.id,\n    transactionIds: res.transactions.map(transaction => transaction.id),\n  }\n\n  return ret\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {httpRequest as defaultHttpRequest} from \"./http-request.js\"\n\nasync function sendGetEventsForHeightRangeRequest(ix, context, opts) {\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/events?type=${ix.events.eventType}&start_height=${ix.events.start}&end_height=${ix.events.end}`,\n    method: \"GET\",\n    body: null,\n  })\n\n  return constructResponse(ix, context, res)\n}\n\nasync function sendGetEventsForBlockIDsRequest(ix, context, opts) {\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/events?type=${\n      ix.events.eventType\n    }&block_ids=${ix.events.blockIds.join(\",\")}`,\n    method: \"GET\",\n    body: null,\n  })\n\n  return constructResponse(ix, context, res)\n}\n\nfunction constructResponse(ix, context, res) {\n  let ret = context.response()\n  ret.tag = ix.tag\n\n  ret.events = []\n  res.forEach(block =>\n    block.events\n      ? block.events.forEach(event =>\n          ret.events.push({\n            blockId: block.block_id,\n            blockHeight: Number(block.block_height),\n            blockTimestamp: block.block_timestamp,\n            type: event.type,\n            transactionId: event.transaction_id,\n            transactionIndex: Number(event.transaction_index),\n            eventIndex: Number(event.event_index),\n            payload: JSON.parse(\n              context.Buffer.from(event.payload, \"base64\").toString()\n            ),\n          })\n        )\n      : null\n  )\n\n  return ret\n}\n\nexport async function sendGetEvents(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Get Events Error: opts.node must be defined.`)\n  invariant(\n    context.response,\n    `SDK Send Get Events Error: context.response must be defined.`\n  )\n  invariant(\n    context.Buffer,\n    `SDK Send Get Events Error: context.Buffer must be defined.`\n  )\n\n  ix = await ix\n\n  const interactionContainsBlockHeightRange = ix.events.start !== null\n  const interactionContainsBlockIDsList =\n    Array.isArray(ix.events.blockIds) && ix.events.blockIds.length > 0\n\n  invariant(\n    interactionContainsBlockHeightRange || interactionContainsBlockIDsList,\n    \"SendGetEventsError: Unable to determine which get events request to send. Either a block height range, or block IDs must be specified.\"\n  )\n\n  if (interactionContainsBlockHeightRange) {\n    return await sendGetEventsForHeightRangeRequest(ix, context, opts)\n  } else {\n    return await sendGetEventsForBlockIDsRequest(ix, context, opts)\n  }\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {httpRequest as defaultHttpRequest} from \"./http-request.js\"\n\nexport async function sendGetTransaction(ix, context = {}, opts = {}) {\n  invariant(\n    opts.node,\n    `SDK Send Get Transaction Error: opts.node must be defined.`\n  )\n  invariant(\n    context.response,\n    `SDK Send Get Transaction Error: context.response must be defined.`\n  )\n  invariant(\n    context.Buffer,\n    `SDK Send Get Transaction Error: context.Buffer must be defined.`\n  )\n\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  ix = await ix\n\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/transactions/${ix.transaction.id}`,\n    method: \"GET\",\n    body: null,\n  })\n\n  const unwrapKey = key => ({\n    address: key.address,\n    keyId: Number(key.key_id),\n    sequenceNumber: Number(key.sequence_number),\n  })\n\n  const unwrapSignature = sig => ({\n    address: sig.address,\n    keyId: Number(sig.key_index),\n    signature: sig.signature,\n  })\n\n  const unwrapArg = arg =>\n    JSON.parse(context.Buffer.from(arg, \"base64\").toString())\n\n  let ret = context.response()\n  ret.tag = ix.tag\n  ret.transaction = {\n    script: context.Buffer.from(res.script, \"base64\").toString(),\n    args: [...res.arguments.map(unwrapArg)],\n    referenceBlockId: res.reference_block_id,\n    gasLimit: Number(res.gas_limit),\n    payer: res.payer,\n    proposalKey: res.proposal_key\n      ? unwrapKey(res.proposal_key)\n      : res.proposal_key,\n    authorizers: res.authorizers,\n    payloadSignatures: [...res.payload_signatures.map(unwrapSignature)],\n    envelopeSignatures: [...res.envelope_signatures.map(unwrapSignature)],\n  }\n\n  return ret\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {httpRequest as defaultHttpRequest} from \"./http-request.js\"\n\nconst STATUS_MAP = {\n  UNKNOWN: 0,\n  PENDING: 1,\n  FINALIZED: 2,\n  EXECUTED: 3,\n  SEALED: 4,\n  EXPIRED: 5,\n}\n\nexport async function sendGetTransactionStatus(ix, context = {}, opts = {}) {\n  invariant(\n    opts.node,\n    `SDK Send Get Transaction Status Error: opts.node must be defined.`\n  )\n  invariant(\n    context.response,\n    `SDK Send Get Transaction Status Error: context.response must be defined.`\n  )\n  invariant(\n    context.Buffer,\n    `SDK Send Get Transaction Status Error: context.Buffer must be defined.`\n  )\n\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  ix = await ix\n\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/transaction_results/${ix.transaction.id}`,\n    method: \"GET\",\n    body: null,\n  })\n\n  let ret = context.response()\n  ret.tag = ix.tag\n  ret.transactionStatus = {\n    blockId: res.block_id,\n    status: STATUS_MAP[res.status.toUpperCase()] || \"\",\n    statusString: res.status.toUpperCase(),\n    statusCode: res.status_code,\n    errorMessage: res.error_message,\n    events: res.events.map(event => ({\n      type: event.type,\n      transactionId: event.transaction_id,\n      transactionIndex: Number(event.transaction_index),\n      eventIndex: Number(event.event_index),\n      payload: JSON.parse(\n        context.Buffer.from(event.payload, \"base64\").toString()\n      ),\n    })),\n  }\n\n  return ret\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {httpRequest as defaultHttpRequest} from \"./http-request.js\"\n\nexport async function sendPing(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Ping Error: opts.node must be defined.`)\n  invariant(\n    context.response,\n    `SDK Send Ping Error: context.response must be defined.`\n  )\n\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  await httpRequest({\n    hostname: opts.node,\n    path: \"/v1/blocks?height=sealed\",\n    method: \"GET\",\n    body: null,\n  })\n\n  let ret = context.response()\n  ret.tag = ix.tag\n\n  return ret\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {sansPrefix} from \"@onflow/util-address\"\nimport {httpRequest as defaultHttpRequest} from \"./http-request.js\"\n\nconst idof = acct => `${withPrefix(acct.addr)}-${acct.keyId}`\n\nexport async function sendTransaction(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Transaction Error: opts.node must be defined.`)\n  invariant(\n    context.response,\n    `SDK Send Transaction Error: context.response must be defined.`\n  )\n  invariant(\n    context.Buffer,\n    `SDK Send Transaction Error: context.Buffer must be defined.`\n  )\n\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  ix = await ix\n\n  // Apply Non Payer Signatures to Payload Signatures\n  let payloadSignatures = []\n  for (let acct of Object.values(ix.accounts)) {\n    try {\n      if (!acct.role.payer && acct.signature != null) {\n        payloadSignatures.push({\n          address: sansPrefix(acct.addr),\n          key_index: String(acct.keyId),\n          signature: context.Buffer.from(acct.signature, \"hex\").toString(\n            \"base64\"\n          ),\n        })\n      }\n    } catch (error) {\n      console.error(\"SDK HTTP Send Error: Trouble applying payload signature\", {\n        acct,\n        ix,\n      })\n      throw error\n    }\n  }\n\n  // Apply Payer Signatures to Envelope Signatures\n  let envelopeSignatures = {}\n  for (let acct of Object.values(ix.accounts)) {\n    try {\n      if (acct.role.payer && acct.signature != null) {\n        let id = acct.tempId || idof(acct)\n        envelopeSignatures[id] = envelopeSignatures[id] || {\n          address: sansPrefix(acct.addr),\n          key_index: String(acct.keyId),\n          signature: context.Buffer.from(acct.signature, \"hex\").toString(\n            \"base64\"\n          ),\n        }\n      }\n    } catch (error) {\n      console.error(\n        \"SDK HTTP Send Error: Trouble applying envelope signature\",\n        {acct, ix}\n      )\n      throw error\n    }\n  }\n  envelopeSignatures = Object.values(envelopeSignatures)\n\n  var t1 = Date.now()\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/transactions`,\n    method: \"POST\",\n    body: {\n      script: context.Buffer.from(ix.message.cadence).toString(\"base64\"),\n      arguments: [\n        ...ix.message.arguments.map(arg =>\n          context.Buffer.from(\n            JSON.stringify(ix.arguments[arg].asArgument)\n          ).toString(\"base64\")\n        ),\n      ],\n      reference_block_id: ix.message.refBlock ? ix.message.refBlock : null,\n      gas_limit: String(ix.message.computeLimit),\n      payer: sansPrefix(\n        ix.accounts[Array.isArray(ix.payer) ? ix.payer[0] : ix.payer].addr\n      ),\n      proposal_key: {\n        address: sansPrefix(ix.accounts[ix.proposer].addr),\n        key_index: String(ix.accounts[ix.proposer].keyId),\n        sequence_number: String(ix.accounts[ix.proposer].sequenceNum),\n      },\n      authorizers: ix.authorizations\n        .map(tempId => ix.accounts[tempId].addr)\n        .reduce((prev, current) => {\n          return prev.find(item => item === current) ? prev : [...prev, current]\n        }, [])\n        .map(sansPrefix),\n      payload_signatures: payloadSignatures,\n      envelope_signatures: envelopeSignatures,\n    },\n  })\n  var t2 = Date.now()\n\n  let ret = context.response()\n  ret.tag = ix.tag\n  ret.transactionId = res.id\n\n  if (typeof window !== \"undefined\") {\n    window.dispatchEvent(\n      new CustomEvent(\"FLOW::TX\", {\n        detail: {txId: ret.transactionId, delta: t2 - t1},\n      })\n    )\n  }\n\n  return ret\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {sendTransaction} from \"./send-transaction.js\"\nimport {sendGetTransactionStatus} from \"./send-get-transaction-status.js\"\nimport {sendGetTransaction} from \"./send-get-transaction.js\"\nimport {sendExecuteScript} from \"./send-execute-script.js\"\nimport {sendGetAccount} from \"./send-get-account.js\"\nimport {sendGetEvents} from \"./send-get-events.js\"\nimport {sendGetBlock} from \"./send-get-block.js\"\nimport {sendGetBlockHeader} from \"./send-get-block-header.js\"\nimport {sendGetCollection} from \"./send-get-collection.js\"\nimport {sendPing} from \"./send-ping.js\"\n\nexport const send = async (ix, context = {}, opts = {}) => {\n  invariant(\n    opts.node,\n    `SDK Send Error: Either opts.node or \"accessNode.api\" in config must be defined.`\n  )\n  invariant(context.ix, `SDK Send Error: context.ix must be defined.`)\n\n  ix = await ix\n\n  // prettier-ignore\n  switch (true) {\n    case context.ix.isTransaction(ix):\n      return opts.sendTransaction ? opts.sendTransaction(ix, context, opts) : sendTransaction(ix, context, opts)\n    case context.ix.isGetTransactionStatus(ix):\n      return opts.sendGetTransactionStatus ? opts.sendGetTransactionStatus(ix, context, opts) : sendGetTransactionStatus(ix, context, opts)\n    case context.ix.isGetTransaction(ix):\n      return opts.sendGetTransaction ? opts.sendGetTransaction(ix, context, opts) : sendGetTransaction(ix, context, opts)\n    case context.ix.isScript(ix):\n      return opts.sendExecuteScript ? opts.sendExecuteScript(ix, context, opts) : sendExecuteScript(ix, context, opts)\n    case context.ix.isGetAccount(ix):\n      return opts.sendGetAccount ? opts.sendGetAccount(ix, context, opts) : sendGetAccount(ix, context, opts)\n    case context.ix.isGetEvents(ix):\n      return opts.sendGetEvents ? opts.sendGetEvents(ix, context, opts) : sendGetEvents(ix, context, opts)\n    case context.ix.isGetBlock(ix):\n      return opts.sendGetBlock ? opts.sendGetBlock(ix, context, opts) : sendGetBlock(ix, context, opts)\n    case context.ix.isGetBlockHeader(ix):\n      return opts.sendGetBlockHeader ? opts.sendGetBlockHeader(ix, context, opts) : sendGetBlockHeader(ix, context, opts)\n    case context.ix.isGetCollection(ix):\n      return opts.sendGetCollection ? opts.sendGetCollection(ix, context, opts) : sendGetCollection(ix, context, opts)\n    case context.ix.isPing(ix):\n      return opts.sendPing ? opts.sendPing(ix, context, opts) : sendPing(ix, context, opts)\n    default:\n      return ix\n  }\n}\n"],"names":["HTTPRequestError","error","hostname","path","method","requestBody","responseBody","responseStatusText","statusCode","_classCallCheck","msg","name","errorMessage","Error","httpRequest","_asyncToGenerator","_regeneratorRuntime","makeRequest","requestLoop","retryAttempt","resp","retryStatusCodes","includes","Promise","resolve","reject","retryLimit","console","warn","retryIntervalMs","setTimeout","fetchTransport","body","bodyJSON","headers","then","res","ok","json","text","responseText","response","safeParseJSON","message","statusText","status","e","logger","log","title","level","LEVELS","JSON","stringify","data","parse","sendExecuteScriptAtBlockIDRequest","ix","context","opts","defaultHttpRequest","node","block","id","script","Buffer","from","cadence","toString","arguments","map","arg","asArgument","constructResponse","sendExecuteScriptAtBlockHeightRequest","height","sendExecuteScriptAtLatestBlockRequest","ret","tag","encodedData","sendExecuteScript","invariant","HashAlgorithmIDs","SHA2_256","SHA2_384","SHA3_256","SHA3_384","KMAC128_BLS_BLS12_381","SignatureAlgorithmIDs","ECDSA_P256","ECDSA_secp256k1","BLS_BLS12_381","sendGetAccountAtBlockHeightRequest","account","addr","sendGetAccountAtLatestBlockRequest","unwrapContracts","contracts","c","Object","keys","key","address","balance","Number","code","index","publicKey","public_key","replace","signAlgo","signing_algorithm","signAlgoString","hashAlgo","hashing_algorithm","hashAlgoString","sequenceNumber","sequence_number","weight","revoked","sendGetAccount","sendGetBlockHeaderByIDRequest","sendGetBlockHeaderByHeightRequest","sendGetLatestBlockHeaderRequest","isSealed","length","blockHeader","header","parentId","parent_id","timestamp","sendGetBlockHeader","interactionHasBlockID","interactionHasBlockHeight","sendGetBlockByIDRequest","sendGetBlockByHeightRequest","sendGetBlockRequest","collectionGuarantees","payload","collection_guarantees","collectionGuarantee","collectionId","collection_id","signerIds","signer_ids","blockSeals","block_seals","blockSeal","blockId","block_id","executionReceiptId","result_id","sendGetBlock","sendGetCollection","collection","transactionIds","transactions","transaction","sendGetEventsForHeightRangeRequest","events","eventType","start","end","sendGetEventsForBlockIDsRequest","blockIds","join","forEach","event","push","blockHeight","block_height","blockTimestamp","block_timestamp","type","transactionId","transaction_id","transactionIndex","transaction_index","eventIndex","event_index","sendGetEvents","interactionContainsBlockHeightRange","interactionContainsBlockIDsList","Array","isArray","sendGetTransaction","unwrapKey","keyId","key_id","unwrapSignature","sig","key_index","signature","unwrapArg","args","_toConsumableArray","referenceBlockId","reference_block_id","gasLimit","gas_limit","payer","proposalKey","proposal_key","authorizers","payloadSignatures","payload_signatures","envelopeSignatures","envelope_signatures","STATUS_MAP","UNKNOWN","PENDING","FINALIZED","EXECUTED","SEALED","EXPIRED","sendGetTransactionStatus","transactionStatus","toUpperCase","statusString","status_code","error_message","sendPing","idof","acct","withPrefix","sendTransaction","values","accounts","role","sansPrefix","String","tempId","t1","Date","now","refBlock","computeLimit","proposer","sequenceNum","authorizations","reduce","prev","current","find","item","t2","window","dispatchEvent","CustomEvent","detail","txId","delta","send","isTransaction","isGetTransactionStatus","isGetTransaction","isScript","isGetAccount","isGetEvents","isGetBlock","isGetBlockHeader","isGetCollection","isPing"],"mappings":"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"}