'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _asyncToGenerator = require('@babel/runtime/helpers/asyncToGenerator');
var _regeneratorRuntime = require('@babel/runtime/regenerator');
var utilInvariant = require('@onflow/util-invariant');
require('buffer');
var _createClass = require('@babel/runtime/helpers/createClass');
var _classCallCheck = require('@babel/runtime/helpers/classCallCheck');
var _inherits = require('@babel/runtime/helpers/inherits');
var _createSuper = require('@babel/runtime/helpers/createSuper');
var _wrapNativeSuper = require('@babel/runtime/helpers/wrapNativeSuper');
var logger = require('@onflow/util-logger');
var fetchTransport = require('node-fetch');
var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var utilAddress = require('@onflow/util-address');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var _asyncToGenerator__default = /*#__PURE__*/_interopDefaultLegacy(_asyncToGenerator);
var _regeneratorRuntime__default = /*#__PURE__*/_interopDefaultLegacy(_regeneratorRuntime);
var _createClass__default = /*#__PURE__*/_interopDefaultLegacy(_createClass);
var _classCallCheck__default = /*#__PURE__*/_interopDefaultLegacy(_classCallCheck);
var _inherits__default = /*#__PURE__*/_interopDefaultLegacy(_inherits);
var _createSuper__default = /*#__PURE__*/_interopDefaultLegacy(_createSuper);
var _wrapNativeSuper__default = /*#__PURE__*/_interopDefaultLegacy(_wrapNativeSuper);
var logger__namespace = /*#__PURE__*/_interopNamespace(logger);
var fetchTransport__default = /*#__PURE__*/_interopDefaultLegacy(fetchTransport);
var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);

var HTTPRequestError = /*#__PURE__*/function (_Error) {
  _inherits__default["default"](HTTPRequestError, _Error);

  var _super = _createSuper__default["default"](HTTPRequestError);

  function HTTPRequestError(_ref) {
    var _this;

    var error = _ref.error,
        hostname = _ref.hostname,
        path = _ref.path,
        method = _ref.method,
        requestBody = _ref.requestBody,
        responseBody = _ref.responseBody,
        responseStatusText = _ref.responseStatusText,
        statusCode = _ref.statusCode;

    _classCallCheck__default["default"](this, HTTPRequestError);

    var msg = "\n      HTTP Request Error: An error occurred when interacting with the Access API.\n      ".concat(error ? "error=".concat(error) : "", "\n      ").concat(hostname ? "hostname=".concat(hostname) : "", "\n      ").concat(path ? "path=".concat(path) : "", "\n      ").concat(method ? "method=".concat(method) : "", "\n      ").concat(requestBody ? "requestBody=".concat(requestBody) : "", "\n      ").concat(responseBody ? "responseBody=".concat(responseBody) : "", "\n      ").concat(responseStatusText ? "responseStatusText=".concat(responseStatusText) : "", "\n      ").concat(statusCode ? "statusCode=".concat(statusCode) : "", "\n    ");
    _this = _super.call(this, msg);
    _this.name = "HTTP Request Error";
    _this.statusCode = statusCode;
    _this.errorMessage = error;
    return _this;
  }

  return _createClass__default["default"](HTTPRequestError);
}( /*#__PURE__*/_wrapNativeSuper__default["default"](Error));
/**
 * Creates an HTTP Request to be sent to a REST Access API via Fetch API.
 *
 * @param {Object} options - Options for the HTTP Request
 * @param {String} options.hostname - Access API Hostname
 * @param {String} options.path - Path to the resource on the Access API
 * @param {String} options.method - HTTP Method
 * @param {Object} options.body - HTTP Request Body
 * @param {Object | Headers} [options.headers] - HTTP Request Headers
 *
 * @returns JSON object response from Access API.
 */


function httpRequest(_x) {
  return _httpRequest.apply(this, arguments);
}

function _httpRequest() {
  _httpRequest = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee4(_ref2) {
    var hostname, path, method, body, headers, _ref2$retryLimit, retryLimit, _ref2$retryIntervalMs, retryIntervalMs, bodyJSON, makeRequest, requestLoop, _requestLoop;

    return _regeneratorRuntime__default["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _requestLoop = function _requestLoop3() {
              _requestLoop = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee3() {
                var retryAttempt,
                    resp,
                    retryStatusCodes,
                    _args3 = arguments;
                return _regeneratorRuntime__default["default"].wrap(function _callee3$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        retryAttempt = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : 0;
                        _context3.prev = 1;
                        _context3.next = 4;
                        return makeRequest();

                      case 4:
                        resp = _context3.sent;
                        return _context3.abrupt("return", resp);

                      case 8:
                        _context3.prev = 8;
                        _context3.t0 = _context3["catch"](1);
                        retryStatusCodes = [408, 429, 500, 502, 503, 504];

                        if (!retryStatusCodes.includes(_context3.t0.statusCode)) {
                          _context3.next = 17;
                          break;
                        }

                        _context3.next = 14;
                        return new Promise(function (resolve, reject) {
                          if (retryAttempt < retryLimit) {
                            console.warn("Access node unavailable, retrying in ".concat(retryIntervalMs, " ms..."));
                            setTimeout(function () {
                              resolve(requestLoop(retryAttempt + 1));
                            }, retryIntervalMs);
                          } else {
                            reject(_context3.t0);
                          }
                        });

                      case 14:
                        return _context3.abrupt("return", _context3.sent);

                      case 17:
                        throw _context3.t0;

                      case 18:
                      case "end":
                        return _context3.stop();
                    }
                  }
                }, _callee3, null, [[1, 8]]);
              }));
              return _requestLoop.apply(this, arguments);
            };

            requestLoop = function _requestLoop2() {
              return _requestLoop.apply(this, arguments);
            };

            makeRequest = function _makeRequest() {
              return fetchTransport__default["default"]("".concat(hostname).concat(path), {
                method: method,
                body: bodyJSON,
                headers: headers
              }).then( /*#__PURE__*/function () {
                var _ref3 = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(res) {
                  var responseText, response;
                  return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          if (!res.ok) {
                            _context.next = 2;
                            break;
                          }

                          return _context.abrupt("return", res.json());

                        case 2:
                          if (!res.body) {
                            _context.next = 8;
                            break;
                          }

                          _context.next = 5;
                          return res.text();

                        case 5:
                          _context.t0 = _context.sent;
                          _context.next = 9;
                          break;

                        case 8:
                          _context.t0 = null;

                        case 9:
                          responseText = _context.t0;
                          response = safeParseJSON(responseText);
                          throw new HTTPRequestError({
                            error: response === null || response === void 0 ? void 0 : response.message,
                            hostname: hostname,
                            path: path,
                            method: method,
                            requestBody: bodyJSON,
                            responseBody: responseText,
                            responseStatusText: res.statusText,
                            statusCode: res.status
                          });

                        case 12:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }));

                return function (_x2) {
                  return _ref3.apply(this, arguments);
                };
              }())["catch"]( /*#__PURE__*/function () {
                var _ref4 = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee2(e) {
                  return _regeneratorRuntime__default["default"].wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          if (!(e instanceof HTTPRequestError)) {
                            _context2.next = 2;
                            break;
                          }

                          throw e;

                        case 2:
                          _context2.next = 4;
                          return logger__namespace.log({
                            title: "Access Node Error",
                            message: "The provided access node ".concat(hostname, " does not appear to be a valid REST/HTTP access node.\nPlease verify that you are not unintentionally using a GRPC access node.\nSee more here: https://docs.onflow.org/fcl/reference/sdk-guidelines/#connect"),
                            level: logger__namespace.LEVELS.error
                          });

                        case 4:
                          throw new HTTPRequestError({
                            error: e === null || e === void 0 ? void 0 : e.message,
                            hostname: hostname,
                            path: path,
                            method: method,
                            requestBody: bodyJSON
                          });

                        case 5:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2);
                }));

                return function (_x3) {
                  return _ref4.apply(this, arguments);
                };
              }());
            };

            hostname = _ref2.hostname, path = _ref2.path, method = _ref2.method, body = _ref2.body, headers = _ref2.headers, _ref2$retryLimit = _ref2.retryLimit, retryLimit = _ref2$retryLimit === void 0 ? 5 : _ref2$retryLimit, _ref2$retryIntervalMs = _ref2.retryIntervalMs, retryIntervalMs = _ref2$retryIntervalMs === void 0 ? 1000 : _ref2$retryIntervalMs;
            bodyJSON = body ? JSON.stringify(body) : null;
            _context4.next = 7;
            return requestLoop();

          case 7:
            return _context4.abrupt("return", _context4.sent);

          case 8:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _httpRequest.apply(this, arguments);
}

function safeParseJSON(data) {
  try {
    return JSON.parse(data);
  } catch (_unused) {
    return null;
  }
}

function sendExecuteScriptAtBlockIDRequest(_x, _x2, _x3) {
  return _sendExecuteScriptAtBlockIDRequest.apply(this, arguments);
}

function _sendExecuteScriptAtBlockIDRequest() {
  _sendExecuteScriptAtBlockIDRequest = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(ix, context, opts) {
    var httpRequest$1, res;
    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            httpRequest$1 = opts.httpRequest || httpRequest;
            _context.next = 3;
            return httpRequest$1({
              hostname: opts.node,
              path: "/v1/scripts?block_id=".concat(ix.block.id),
              method: "POST",
              body: {
                script: context.Buffer.from(ix.message.cadence).toString("base64"),
                arguments: ix.message.arguments.map(function (arg) {
                  return context.Buffer.from(JSON.stringify(ix.arguments[arg].asArgument)).toString("base64");
                })
              }
            });

          case 3:
            res = _context.sent;
            return _context.abrupt("return", constructResponse$4(ix, context, res));

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _sendExecuteScriptAtBlockIDRequest.apply(this, arguments);
}

function sendExecuteScriptAtBlockHeightRequest(_x4, _x5, _x6) {
  return _sendExecuteScriptAtBlockHeightRequest.apply(this, arguments);
}

function _sendExecuteScriptAtBlockHeightRequest() {
  _sendExecuteScriptAtBlockHeightRequest = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee2(ix, context, opts) {
    var httpRequest$1, res;
    return _regeneratorRuntime__default["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            httpRequest$1 = opts.httpRequest || httpRequest;
            _context2.next = 3;
            return httpRequest$1({
              hostname: opts.node,
              path: "/v1/scripts?block_height=".concat(ix.block.height),
              method: "POST",
              body: {
                script: context.Buffer.from(ix.message.cadence).toString("base64"),
                arguments: ix.message.arguments.map(function (arg) {
                  return context.Buffer.from(JSON.stringify(ix.arguments[arg].asArgument)).toString("base64");
                })
              }
            });

          case 3:
            res = _context2.sent;
            return _context2.abrupt("return", constructResponse$4(ix, context, res));

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _sendExecuteScriptAtBlockHeightRequest.apply(this, arguments);
}

function sendExecuteScriptAtLatestBlockRequest(_x7, _x8, _x9) {
  return _sendExecuteScriptAtLatestBlockRequest.apply(this, arguments);
}

function _sendExecuteScriptAtLatestBlockRequest() {
  _sendExecuteScriptAtLatestBlockRequest = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee3(ix, context, opts) {
    var httpRequest$1, res;
    return _regeneratorRuntime__default["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            httpRequest$1 = opts.httpRequest || httpRequest;
            _context3.next = 3;
            return httpRequest$1({
              hostname: opts.node,
              path: "/v1/scripts?block_height=sealed",
              method: "POST",
              body: {
                script: context.Buffer.from(ix.message.cadence).toString("base64"),
                arguments: ix.message.arguments.map(function (arg) {
                  return context.Buffer.from(JSON.stringify(ix.arguments[arg].asArgument)).toString("base64");
                })
              }
            });

          case 3:
            res = _context3.sent;
            return _context3.abrupt("return", constructResponse$4(ix, context, res));

          case 5:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _sendExecuteScriptAtLatestBlockRequest.apply(this, arguments);
}

function constructResponse$4(ix, context, res) {
  var ret = context.response();
  ret.tag = ix.tag;
  ret.encodedData = JSON.parse(context.Buffer.from(res, "base64").toString());
  return ret;
}

function sendExecuteScript(_x10) {
  return _sendExecuteScript.apply(this, arguments);
}

function _sendExecuteScript() {
  _sendExecuteScript = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee4(ix) {
    var context,
        opts,
        _args4 = arguments;
    return _regeneratorRuntime__default["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            context = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};
            opts = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};
            utilInvariant.invariant(opts.node, "SDK Send Execute Script Error: opts.node must be defined.");
            utilInvariant.invariant(context.response, "SDK Send Execute Script Error: context.response must be defined.");
            utilInvariant.invariant(context.Buffer, "SDK Send Execute Script Error: context.Buffer must be defined.");
            _context4.next = 7;
            return ix;

          case 7:
            ix = _context4.sent;

            if (!ix.block.id) {
              _context4.next = 14;
              break;
            }

            _context4.next = 11;
            return sendExecuteScriptAtBlockIDRequest(ix, context, opts);

          case 11:
            return _context4.abrupt("return", _context4.sent);

          case 14:
            if (!ix.block.height) {
              _context4.next = 20;
              break;
            }

            _context4.next = 17;
            return sendExecuteScriptAtBlockHeightRequest(ix, context, opts);

          case 17:
            return _context4.abrupt("return", _context4.sent);

          case 20:
            _context4.next = 22;
            return sendExecuteScriptAtLatestBlockRequest(ix, context, opts);

          case 22:
            return _context4.abrupt("return", _context4.sent);

          case 23:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _sendExecuteScript.apply(this, arguments);
}

var HashAlgorithmIDs = {
  SHA2_256: 1,
  SHA2_384: 2,
  SHA3_256: 3,
  SHA3_384: 4,
  KMAC128_BLS_BLS12_381: 5
};
var SignatureAlgorithmIDs = {
  ECDSA_P256: 1,
  ECDSA_secp256k1: 2,
  BLS_BLS12_381: 3
};

function sendGetAccountAtBlockHeightRequest(_x, _x2, _x3) {
  return _sendGetAccountAtBlockHeightRequest.apply(this, arguments);
}

function _sendGetAccountAtBlockHeightRequest() {
  _sendGetAccountAtBlockHeightRequest = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(ix, context, opts) {
    var httpRequest$1, res;
    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            httpRequest$1 = opts.httpRequest || httpRequest;
            _context.next = 3;
            return httpRequest$1({
              hostname: opts.node,
              path: "/v1/accounts/".concat(ix.account.addr, "?block_height=").concat(ix.block.height, "&expand=contracts,keys"),
              method: "GET",
              body: null
            });

          case 3:
            res = _context.sent;
            return _context.abrupt("return", constructResponse$3(ix, context, res));

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _sendGetAccountAtBlockHeightRequest.apply(this, arguments);
}

function sendGetAccountAtLatestBlockRequest(_x4, _x5, _x6) {
  return _sendGetAccountAtLatestBlockRequest.apply(this, arguments);
}

function _sendGetAccountAtLatestBlockRequest() {
  _sendGetAccountAtLatestBlockRequest = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee2(ix, context, opts) {
    var httpRequest$1, res;
    return _regeneratorRuntime__default["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            httpRequest$1 = opts.httpRequest || httpRequest;
            _context2.next = 3;
            return httpRequest$1({
              hostname: opts.node,
              path: "/v1/accounts/".concat(ix.account.addr, "?block_height=sealed&expand=contracts,keys"),
              method: "GET",
              body: null
            });

          case 3:
            res = _context2.sent;
            return _context2.abrupt("return", constructResponse$3(ix, context, res));

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _sendGetAccountAtLatestBlockRequest.apply(this, arguments);
}

function constructResponse$3(ix, context, res) {
  var _res$keys$map, _res$keys;

  var ret = context.response();
  ret.tag = ix.tag;

  var unwrapContracts = function unwrapContracts(contracts) {
    var c = {};
    if (!contracts) return c;

    for (var _i = 0, _Object$keys = Object.keys(contracts); _i < _Object$keys.length; _i++) {
      var key = _Object$keys[_i];
      c[key] = context.Buffer.from(contracts[key], "base64").toString();
    }

    return c;
  };

  ret.account = {
    address: res.address,
    balance: Number(res.balance),
    code: "",
    contracts: unwrapContracts(res.contracts),
    keys: (_res$keys$map = (_res$keys = res.keys) === null || _res$keys === void 0 ? void 0 : _res$keys.map(function (key) {
      return {
        index: Number(key.index),
        publicKey: key.public_key.replace(/^0x/, ""),
        signAlgo: SignatureAlgorithmIDs[key.signing_algorithm],
        signAlgoString: key.signing_algorithm,
        hashAlgo: HashAlgorithmIDs[key.hashing_algorithm],
        hashAlgoString: key.hashing_algorithm,
        sequenceNumber: Number(key.sequence_number),
        weight: Number(key.weight),
        revoked: key.revoked
      };
    })) !== null && _res$keys$map !== void 0 ? _res$keys$map : []
  };
  return ret;
}

function sendGetAccount(_x7) {
  return _sendGetAccount.apply(this, arguments);
}

function _sendGetAccount() {
  _sendGetAccount = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee3(ix) {
    var context,
        opts,
        _args3 = arguments;
    return _regeneratorRuntime__default["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            context = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};
            opts = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {};
            utilInvariant.invariant(opts.node, "SDK Send Get Account Error: opts.node must be defined.");
            utilInvariant.invariant(context.response, "SDK Send Get Account Error: context.response must be defined.");
            utilInvariant.invariant(context.Buffer, "SDK Send Get Account Error: context.Buffer must be defined.");
            _context3.next = 7;
            return ix;

          case 7:
            ix = _context3.sent;

            if (!(ix.block.height !== null)) {
              _context3.next = 14;
              break;
            }

            _context3.next = 11;
            return sendGetAccountAtBlockHeightRequest(ix, context, opts);

          case 11:
            return _context3.abrupt("return", _context3.sent);

          case 14:
            _context3.next = 16;
            return sendGetAccountAtLatestBlockRequest(ix, context, opts);

          case 16:
            return _context3.abrupt("return", _context3.sent);

          case 17:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _sendGetAccount.apply(this, arguments);
}

function sendGetBlockHeaderByIDRequest(_x, _x2, _x3) {
  return _sendGetBlockHeaderByIDRequest.apply(this, arguments);
}

function _sendGetBlockHeaderByIDRequest() {
  _sendGetBlockHeaderByIDRequest = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(ix, context, opts) {
    var httpRequest$1, res;
    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            httpRequest$1 = opts.httpRequest || httpRequest;
            _context.next = 3;
            return httpRequest$1({
              hostname: opts.node,
              path: "/v1/blocks/".concat(ix.block.id),
              method: "GET",
              body: null
            });

          case 3:
            res = _context.sent;
            return _context.abrupt("return", constructResponse$2(ix, context, res));

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _sendGetBlockHeaderByIDRequest.apply(this, arguments);
}

function sendGetBlockHeaderByHeightRequest(_x4, _x5, _x6) {
  return _sendGetBlockHeaderByHeightRequest.apply(this, arguments);
}

function _sendGetBlockHeaderByHeightRequest() {
  _sendGetBlockHeaderByHeightRequest = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee2(ix, context, opts) {
    var httpRequest$1, res;
    return _regeneratorRuntime__default["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            httpRequest$1 = opts.httpRequest || httpRequest;
            _context2.next = 3;
            return httpRequest$1({
              hostname: opts.node,
              path: "/v1/blocks?height=".concat(ix.block.height),
              method: "GET",
              body: null
            });

          case 3:
            res = _context2.sent;
            return _context2.abrupt("return", constructResponse$2(ix, context, res));

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _sendGetBlockHeaderByHeightRequest.apply(this, arguments);
}

function sendGetLatestBlockHeaderRequest(_x7, _x8, _x9) {
  return _sendGetLatestBlockHeaderRequest.apply(this, arguments);
}

function _sendGetLatestBlockHeaderRequest() {
  _sendGetLatestBlockHeaderRequest = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee3(ix, context, opts) {
    var _ix$block;

    var httpRequest$1, height, res;
    return _regeneratorRuntime__default["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            httpRequest$1 = opts.httpRequest || httpRequest;
            height = (_ix$block = ix.block) !== null && _ix$block !== void 0 && _ix$block.isSealed ? "sealed" : "finalized";
            _context3.next = 4;
            return httpRequest$1({
              hostname: opts.node,
              path: "/v1/blocks?height=".concat(height),
              method: "GET",
              body: null
            });

          case 4:
            res = _context3.sent;
            return _context3.abrupt("return", constructResponse$2(ix, context, res));

          case 6:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _sendGetLatestBlockHeaderRequest.apply(this, arguments);
}

function constructResponse$2(ix, context, res) {
  var block = res.length ? res[0] : null;
  var ret = context.response();
  ret.tag = ix.tag;
  ret.blockHeader = {
    id: block.header.id,
    parentId: block.header.parent_id,
    height: Number(block.header.height),
    timestamp: block.header.timestamp
  };
  return ret;
}

function sendGetBlockHeader(_x10) {
  return _sendGetBlockHeader.apply(this, arguments);
}

function _sendGetBlockHeader() {
  _sendGetBlockHeader = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee4(ix) {
    var context,
        opts,
        interactionHasBlockID,
        interactionHasBlockHeight,
        _args4 = arguments;
    return _regeneratorRuntime__default["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            context = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};
            opts = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};
            utilInvariant.invariant(opts.node, "SDK Send Get Block Header Error: opts.node must be defined.");
            utilInvariant.invariant(context.response, "SDK Send Get Block Header Error: context.response must be defined.");
            _context4.next = 6;
            return ix;

          case 6:
            ix = _context4.sent;
            interactionHasBlockID = ix.block.id !== null;
            interactionHasBlockHeight = ix.block.height !== null;

            if (!interactionHasBlockID) {
              _context4.next = 15;
              break;
            }

            _context4.next = 12;
            return sendGetBlockHeaderByIDRequest(ix, context, opts);

          case 12:
            return _context4.abrupt("return", _context4.sent);

          case 15:
            if (!interactionHasBlockHeight) {
              _context4.next = 21;
              break;
            }

            _context4.next = 18;
            return sendGetBlockHeaderByHeightRequest(ix, context, opts);

          case 18:
            return _context4.abrupt("return", _context4.sent);

          case 21:
            _context4.next = 23;
            return sendGetLatestBlockHeaderRequest(ix, context, opts);

          case 23:
            return _context4.abrupt("return", _context4.sent);

          case 24:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _sendGetBlockHeader.apply(this, arguments);
}

function sendGetBlockByIDRequest(_x, _x2, _x3) {
  return _sendGetBlockByIDRequest.apply(this, arguments);
}

function _sendGetBlockByIDRequest() {
  _sendGetBlockByIDRequest = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(ix, context, opts) {
    var httpRequest$1, res;
    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            httpRequest$1 = opts.httpRequest || httpRequest;
            _context.next = 3;
            return httpRequest$1({
              hostname: opts.node,
              path: "/v1/blocks/".concat(ix.block.id, "?expand=payload"),
              method: "GET",
              body: null
            });

          case 3:
            res = _context.sent;
            return _context.abrupt("return", constructResponse$1(ix, context, res));

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _sendGetBlockByIDRequest.apply(this, arguments);
}

function sendGetBlockByHeightRequest(_x4, _x5, _x6) {
  return _sendGetBlockByHeightRequest.apply(this, arguments);
}

function _sendGetBlockByHeightRequest() {
  _sendGetBlockByHeightRequest = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee2(ix, context, opts) {
    var httpRequest$1, res;
    return _regeneratorRuntime__default["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            httpRequest$1 = opts.httpRequest || httpRequest;
            _context2.next = 3;
            return httpRequest$1({
              hostname: opts.node,
              path: "/v1/blocks?height=".concat(ix.block.height, "&expand=payload"),
              method: "GET",
              body: null
            });

          case 3:
            res = _context2.sent;
            return _context2.abrupt("return", constructResponse$1(ix, context, res));

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _sendGetBlockByHeightRequest.apply(this, arguments);
}

function sendGetBlockRequest(_x7, _x8, _x9) {
  return _sendGetBlockRequest.apply(this, arguments);
}

function _sendGetBlockRequest() {
  _sendGetBlockRequest = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee3(ix, context, opts) {
    var _ix$block;

    var httpRequest$1, height, res;
    return _regeneratorRuntime__default["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            httpRequest$1 = opts.httpRequest || httpRequest;
            height = (_ix$block = ix.block) !== null && _ix$block !== void 0 && _ix$block.isSealed ? "sealed" : "final";
            _context3.next = 4;
            return httpRequest$1({
              hostname: opts.node,
              path: "/v1/blocks?height=".concat(height, "&expand=payload"),
              method: "GET",
              body: null
            });

          case 4:
            res = _context3.sent;
            return _context3.abrupt("return", constructResponse$1(ix, context, res));

          case 6:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _sendGetBlockRequest.apply(this, arguments);
}

function constructResponse$1(ix, context, res) {
  var block = res.length ? res[0] : null;
  var ret = context.response();
  ret.tag = ix.tag;
  ret.block = {
    id: block.header.id,
    parentId: block.header.parent_id,
    height: Number(block.header.height),
    timestamp: block.header.timestamp,
    collectionGuarantees: block.payload.collection_guarantees.map(function (collectionGuarantee) {
      return {
        collectionId: collectionGuarantee.collection_id,
        signerIds: collectionGuarantee.signer_ids
      };
    }),
    blockSeals: block.payload.block_seals.map(function (blockSeal) {
      return {
        blockId: blockSeal.block_id,
        executionReceiptId: blockSeal.result_id
      };
    })
  };
  return ret;
}

function sendGetBlock(_x10) {
  return _sendGetBlock.apply(this, arguments);
}

function _sendGetBlock() {
  _sendGetBlock = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee4(ix) {
    var context,
        opts,
        interactionHasBlockID,
        interactionHasBlockHeight,
        _args4 = arguments;
    return _regeneratorRuntime__default["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            context = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};
            opts = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};
            utilInvariant.invariant(opts.node, "SDK Send Get Block Error: opts.node must be defined.");
            utilInvariant.invariant(context.response, "SDK Send Get Block Error: context.response must be defined.");
            _context4.next = 6;
            return ix;

          case 6:
            ix = _context4.sent;
            interactionHasBlockID = ix.block.id !== null;
            interactionHasBlockHeight = ix.block.height !== null;

            if (!interactionHasBlockID) {
              _context4.next = 15;
              break;
            }

            _context4.next = 12;
            return sendGetBlockByIDRequest(ix, context, opts);

          case 12:
            return _context4.abrupt("return", _context4.sent);

          case 15:
            if (!interactionHasBlockHeight) {
              _context4.next = 21;
              break;
            }

            _context4.next = 18;
            return sendGetBlockByHeightRequest(ix, context, opts);

          case 18:
            return _context4.abrupt("return", _context4.sent);

          case 21:
            _context4.next = 23;
            return sendGetBlockRequest(ix, context, opts);

          case 23:
            return _context4.abrupt("return", _context4.sent);

          case 24:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _sendGetBlock.apply(this, arguments);
}

function sendGetCollection(_x) {
  return _sendGetCollection.apply(this, arguments);
}

function _sendGetCollection() {
  _sendGetCollection = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(ix) {
    var context,
        opts,
        httpRequest$1,
        res,
        ret,
        _args = arguments;
    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            context = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
            opts = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};
            utilInvariant.invariant(opts.node, "SDK Send Get Collection Error: opts.node must be defined.");
            utilInvariant.invariant(context.response, "SDK Send Get Collection Error: context.response must be defined.");
            httpRequest$1 = opts.httpRequest || httpRequest;
            _context.next = 7;
            return httpRequest$1({
              hostname: opts.node,
              path: "/v1/collections/".concat(ix.collection.id, "?expand=transactions"),
              method: "GET",
              body: null
            });

          case 7:
            res = _context.sent;
            ret = context.response();
            ret.tag = ix.tag;
            ret.collection = {
              id: res.id,
              transactionIds: res.transactions.map(function (transaction) {
                return transaction.id;
              })
            };
            return _context.abrupt("return", ret);

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _sendGetCollection.apply(this, arguments);
}

function sendGetEventsForHeightRangeRequest(_x, _x2, _x3) {
  return _sendGetEventsForHeightRangeRequest.apply(this, arguments);
}

function _sendGetEventsForHeightRangeRequest() {
  _sendGetEventsForHeightRangeRequest = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(ix, context, opts) {
    var httpRequest$1, res;
    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            httpRequest$1 = opts.httpRequest || httpRequest;
            _context.next = 3;
            return httpRequest$1({
              hostname: opts.node,
              path: "/v1/events?type=".concat(ix.events.eventType, "&start_height=").concat(ix.events.start, "&end_height=").concat(ix.events.end),
              method: "GET",
              body: null
            });

          case 3:
            res = _context.sent;
            return _context.abrupt("return", constructResponse(ix, context, res));

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _sendGetEventsForHeightRangeRequest.apply(this, arguments);
}

function sendGetEventsForBlockIDsRequest(_x4, _x5, _x6) {
  return _sendGetEventsForBlockIDsRequest.apply(this, arguments);
}

function _sendGetEventsForBlockIDsRequest() {
  _sendGetEventsForBlockIDsRequest = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee2(ix, context, opts) {
    var httpRequest$1, res;
    return _regeneratorRuntime__default["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            httpRequest$1 = opts.httpRequest || httpRequest;
            _context2.next = 3;
            return httpRequest$1({
              hostname: opts.node,
              path: "/v1/events?type=".concat(ix.events.eventType, "&block_ids=").concat(ix.events.blockIds.join(",")),
              method: "GET",
              body: null
            });

          case 3:
            res = _context2.sent;
            return _context2.abrupt("return", constructResponse(ix, context, res));

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _sendGetEventsForBlockIDsRequest.apply(this, arguments);
}

function constructResponse(ix, context, res) {
  var ret = context.response();
  ret.tag = ix.tag;
  ret.events = [];
  res.forEach(function (block) {
    return block.events ? block.events.forEach(function (event) {
      return ret.events.push({
        blockId: block.block_id,
        blockHeight: Number(block.block_height),
        blockTimestamp: block.block_timestamp,
        type: event.type,
        transactionId: event.transaction_id,
        transactionIndex: Number(event.transaction_index),
        eventIndex: Number(event.event_index),
        payload: JSON.parse(context.Buffer.from(event.payload, "base64").toString())
      });
    }) : null;
  });
  return ret;
}

function sendGetEvents(_x7) {
  return _sendGetEvents.apply(this, arguments);
}

function _sendGetEvents() {
  _sendGetEvents = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee3(ix) {
    var context,
        opts,
        interactionContainsBlockHeightRange,
        interactionContainsBlockIDsList,
        _args3 = arguments;
    return _regeneratorRuntime__default["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            context = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};
            opts = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {};
            utilInvariant.invariant(opts.node, "SDK Send Get Events Error: opts.node must be defined.");
            utilInvariant.invariant(context.response, "SDK Send Get Events Error: context.response must be defined.");
            utilInvariant.invariant(context.Buffer, "SDK Send Get Events Error: context.Buffer must be defined.");
            _context3.next = 7;
            return ix;

          case 7:
            ix = _context3.sent;
            interactionContainsBlockHeightRange = ix.events.start !== null;
            interactionContainsBlockIDsList = Array.isArray(ix.events.blockIds) && ix.events.blockIds.length > 0;
            utilInvariant.invariant(interactionContainsBlockHeightRange || interactionContainsBlockIDsList, "SendGetEventsError: Unable to determine which get events request to send. Either a block height range, or block IDs must be specified.");

            if (!interactionContainsBlockHeightRange) {
              _context3.next = 17;
              break;
            }

            _context3.next = 14;
            return sendGetEventsForHeightRangeRequest(ix, context, opts);

          case 14:
            return _context3.abrupt("return", _context3.sent);

          case 17:
            _context3.next = 19;
            return sendGetEventsForBlockIDsRequest(ix, context, opts);

          case 19:
            return _context3.abrupt("return", _context3.sent);

          case 20:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _sendGetEvents.apply(this, arguments);
}

function sendGetTransaction(_x) {
  return _sendGetTransaction.apply(this, arguments);
}

function _sendGetTransaction() {
  _sendGetTransaction = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(ix) {
    var context,
        opts,
        httpRequest$1,
        res,
        unwrapKey,
        unwrapSignature,
        unwrapArg,
        ret,
        _args = arguments;
    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            context = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
            opts = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};
            utilInvariant.invariant(opts.node, "SDK Send Get Transaction Error: opts.node must be defined.");
            utilInvariant.invariant(context.response, "SDK Send Get Transaction Error: context.response must be defined.");
            utilInvariant.invariant(context.Buffer, "SDK Send Get Transaction Error: context.Buffer must be defined.");
            httpRequest$1 = opts.httpRequest || httpRequest;
            _context.next = 8;
            return ix;

          case 8:
            ix = _context.sent;
            _context.next = 11;
            return httpRequest$1({
              hostname: opts.node,
              path: "/v1/transactions/".concat(ix.transaction.id),
              method: "GET",
              body: null
            });

          case 11:
            res = _context.sent;

            unwrapKey = function unwrapKey(key) {
              return {
                address: key.address,
                keyId: Number(key.key_id),
                sequenceNumber: Number(key.sequence_number)
              };
            };

            unwrapSignature = function unwrapSignature(sig) {
              return {
                address: sig.address,
                keyId: Number(sig.key_index),
                signature: sig.signature
              };
            };

            unwrapArg = function unwrapArg(arg) {
              return JSON.parse(context.Buffer.from(arg, "base64").toString());
            };

            ret = context.response();
            ret.tag = ix.tag;
            ret.transaction = {
              script: context.Buffer.from(res.script, "base64").toString(),
              args: _toConsumableArray__default["default"](res.arguments.map(unwrapArg)),
              referenceBlockId: res.reference_block_id,
              gasLimit: Number(res.gas_limit),
              payer: res.payer,
              proposalKey: res.proposal_key ? unwrapKey(res.proposal_key) : res.proposal_key,
              authorizers: res.authorizers,
              payloadSignatures: _toConsumableArray__default["default"](res.payload_signatures.map(unwrapSignature)),
              envelopeSignatures: _toConsumableArray__default["default"](res.envelope_signatures.map(unwrapSignature))
            };
            return _context.abrupt("return", ret);

          case 19:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _sendGetTransaction.apply(this, arguments);
}

var STATUS_MAP = {
  UNKNOWN: 0,
  PENDING: 1,
  FINALIZED: 2,
  EXECUTED: 3,
  SEALED: 4,
  EXPIRED: 5
};
function sendGetTransactionStatus(_x) {
  return _sendGetTransactionStatus.apply(this, arguments);
}

function _sendGetTransactionStatus() {
  _sendGetTransactionStatus = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(ix) {
    var context,
        opts,
        httpRequest$1,
        res,
        ret,
        _args = arguments;
    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            context = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
            opts = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};
            utilInvariant.invariant(opts.node, "SDK Send Get Transaction Status Error: opts.node must be defined.");
            utilInvariant.invariant(context.response, "SDK Send Get Transaction Status Error: context.response must be defined.");
            utilInvariant.invariant(context.Buffer, "SDK Send Get Transaction Status Error: context.Buffer must be defined.");
            httpRequest$1 = opts.httpRequest || httpRequest;
            _context.next = 8;
            return ix;

          case 8:
            ix = _context.sent;
            _context.next = 11;
            return httpRequest$1({
              hostname: opts.node,
              path: "/v1/transaction_results/".concat(ix.transaction.id),
              method: "GET",
              body: null
            });

          case 11:
            res = _context.sent;
            ret = context.response();
            ret.tag = ix.tag;
            ret.transactionStatus = {
              blockId: res.block_id,
              status: STATUS_MAP[res.status.toUpperCase()] || "",
              statusString: res.status.toUpperCase(),
              statusCode: res.status_code,
              errorMessage: res.error_message,
              events: res.events.map(function (event) {
                return {
                  type: event.type,
                  transactionId: event.transaction_id,
                  transactionIndex: Number(event.transaction_index),
                  eventIndex: Number(event.event_index),
                  payload: JSON.parse(context.Buffer.from(event.payload, "base64").toString())
                };
              })
            };
            return _context.abrupt("return", ret);

          case 16:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _sendGetTransactionStatus.apply(this, arguments);
}

function sendPing(_x) {
  return _sendPing.apply(this, arguments);
}

function _sendPing() {
  _sendPing = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(ix) {
    var context,
        opts,
        httpRequest$1,
        ret,
        _args = arguments;
    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            context = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
            opts = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};
            utilInvariant.invariant(opts.node, "SDK Send Ping Error: opts.node must be defined.");
            utilInvariant.invariant(context.response, "SDK Send Ping Error: context.response must be defined.");
            httpRequest$1 = opts.httpRequest || httpRequest;
            _context.next = 7;
            return httpRequest$1({
              hostname: opts.node,
              path: "/v1/blocks?height=sealed",
              method: "GET",
              body: null
            });

          case 7:
            ret = context.response();
            ret.tag = ix.tag;
            return _context.abrupt("return", ret);

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _sendPing.apply(this, arguments);
}

var idof = function idof(acct) {
  return "".concat(withPrefix(acct.addr), "-").concat(acct.keyId);
};

function sendTransaction(_x) {
  return _sendTransaction.apply(this, arguments);
}

function _sendTransaction() {
  _sendTransaction = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(ix) {
    var context,
        opts,
        httpRequest$1,
        payloadSignatures,
        _i,
        _Object$values,
        acct,
        envelopeSignatures,
        _i2,
        _Object$values2,
        _acct,
        id,
        t1,
        res,
        t2,
        ret,
        _args = arguments;

    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            context = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
            opts = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};
            utilInvariant.invariant(opts.node, "SDK Send Transaction Error: opts.node must be defined.");
            utilInvariant.invariant(context.response, "SDK Send Transaction Error: context.response must be defined.");
            utilInvariant.invariant(context.Buffer, "SDK Send Transaction Error: context.Buffer must be defined.");
            httpRequest$1 = opts.httpRequest || httpRequest;
            _context.next = 8;
            return ix;

          case 8:
            ix = _context.sent;
            // Apply Non Payer Signatures to Payload Signatures
            payloadSignatures = [];
            _i = 0, _Object$values = Object.values(ix.accounts);

          case 11:
            if (!(_i < _Object$values.length)) {
              _context.next = 24;
              break;
            }

            acct = _Object$values[_i];
            _context.prev = 13;

            if (!acct.role.payer && acct.signature != null) {
              payloadSignatures.push({
                address: utilAddress.sansPrefix(acct.addr),
                key_index: String(acct.keyId),
                signature: context.Buffer.from(acct.signature, "hex").toString("base64")
              });
            }

            _context.next = 21;
            break;

          case 17:
            _context.prev = 17;
            _context.t0 = _context["catch"](13);
            console.error("SDK HTTP Send Error: Trouble applying payload signature", {
              acct: acct,
              ix: ix
            });
            throw _context.t0;

          case 21:
            _i++;
            _context.next = 11;
            break;

          case 24:
            // Apply Payer Signatures to Envelope Signatures
            envelopeSignatures = {};
            _i2 = 0, _Object$values2 = Object.values(ix.accounts);

          case 26:
            if (!(_i2 < _Object$values2.length)) {
              _context.next = 39;
              break;
            }

            _acct = _Object$values2[_i2];
            _context.prev = 28;

            if (_acct.role.payer && _acct.signature != null) {
              id = _acct.tempId || idof(_acct);
              envelopeSignatures[id] = envelopeSignatures[id] || {
                address: utilAddress.sansPrefix(_acct.addr),
                key_index: String(_acct.keyId),
                signature: context.Buffer.from(_acct.signature, "hex").toString("base64")
              };
            }

            _context.next = 36;
            break;

          case 32:
            _context.prev = 32;
            _context.t1 = _context["catch"](28);
            console.error("SDK HTTP Send Error: Trouble applying envelope signature", {
              acct: _acct,
              ix: ix
            });
            throw _context.t1;

          case 36:
            _i2++;
            _context.next = 26;
            break;

          case 39:
            envelopeSignatures = Object.values(envelopeSignatures);
            t1 = Date.now();
            _context.next = 43;
            return httpRequest$1({
              hostname: opts.node,
              path: "/v1/transactions",
              method: "POST",
              body: {
                script: context.Buffer.from(ix.message.cadence).toString("base64"),
                arguments: _toConsumableArray__default["default"](ix.message.arguments.map(function (arg) {
                  return context.Buffer.from(JSON.stringify(ix.arguments[arg].asArgument)).toString("base64");
                })),
                reference_block_id: ix.message.refBlock ? ix.message.refBlock : null,
                gas_limit: String(ix.message.computeLimit),
                payer: utilAddress.sansPrefix(ix.accounts[Array.isArray(ix.payer) ? ix.payer[0] : ix.payer].addr),
                proposal_key: {
                  address: utilAddress.sansPrefix(ix.accounts[ix.proposer].addr),
                  key_index: String(ix.accounts[ix.proposer].keyId),
                  sequence_number: String(ix.accounts[ix.proposer].sequenceNum)
                },
                authorizers: ix.authorizations.map(function (tempId) {
                  return ix.accounts[tempId].addr;
                }).reduce(function (prev, current) {
                  return prev.find(function (item) {
                    return item === current;
                  }) ? prev : [].concat(_toConsumableArray__default["default"](prev), [current]);
                }, []).map(utilAddress.sansPrefix),
                payload_signatures: payloadSignatures,
                envelope_signatures: envelopeSignatures
              }
            });

          case 43:
            res = _context.sent;
            t2 = Date.now();
            ret = context.response();
            ret.tag = ix.tag;
            ret.transactionId = res.id;

            if (typeof window !== "undefined") {
              window.dispatchEvent(new CustomEvent("FLOW::TX", {
                detail: {
                  txId: ret.transactionId,
                  delta: t2 - t1
                }
              }));
            }

            return _context.abrupt("return", ret);

          case 50:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[13, 17], [28, 32]]);
  }));
  return _sendTransaction.apply(this, arguments);
}

var send = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(ix) {
    var context,
        opts,
        _args = arguments;
    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            context = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
            opts = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};
            utilInvariant.invariant(opts.node, "SDK Send Error: Either opts.node or \"accessNode.api\" in config must be defined.");
            utilInvariant.invariant(context.ix, "SDK Send Error: context.ix must be defined.");
            _context.next = 6;
            return ix;

          case 6:
            ix = _context.sent;
            _context.t0 = true;
            _context.next = _context.t0 === context.ix.isTransaction(ix) ? 10 : _context.t0 === context.ix.isGetTransactionStatus(ix) ? 11 : _context.t0 === context.ix.isGetTransaction(ix) ? 12 : _context.t0 === context.ix.isScript(ix) ? 13 : _context.t0 === context.ix.isGetAccount(ix) ? 14 : _context.t0 === context.ix.isGetEvents(ix) ? 15 : _context.t0 === context.ix.isGetBlock(ix) ? 16 : _context.t0 === context.ix.isGetBlockHeader(ix) ? 17 : _context.t0 === context.ix.isGetCollection(ix) ? 18 : _context.t0 === context.ix.isPing(ix) ? 19 : 20;
            break;

          case 10:
            return _context.abrupt("return", opts.sendTransaction ? opts.sendTransaction(ix, context, opts) : sendTransaction(ix, context, opts));

          case 11:
            return _context.abrupt("return", opts.sendGetTransactionStatus ? opts.sendGetTransactionStatus(ix, context, opts) : sendGetTransactionStatus(ix, context, opts));

          case 12:
            return _context.abrupt("return", opts.sendGetTransaction ? opts.sendGetTransaction(ix, context, opts) : sendGetTransaction(ix, context, opts));

          case 13:
            return _context.abrupt("return", opts.sendExecuteScript ? opts.sendExecuteScript(ix, context, opts) : sendExecuteScript(ix, context, opts));

          case 14:
            return _context.abrupt("return", opts.sendGetAccount ? opts.sendGetAccount(ix, context, opts) : sendGetAccount(ix, context, opts));

          case 15:
            return _context.abrupt("return", opts.sendGetEvents ? opts.sendGetEvents(ix, context, opts) : sendGetEvents(ix, context, opts));

          case 16:
            return _context.abrupt("return", opts.sendGetBlock ? opts.sendGetBlock(ix, context, opts) : sendGetBlock(ix, context, opts));

          case 17:
            return _context.abrupt("return", opts.sendGetBlockHeader ? opts.sendGetBlockHeader(ix, context, opts) : sendGetBlockHeader(ix, context, opts));

          case 18:
            return _context.abrupt("return", opts.sendGetCollection ? opts.sendGetCollection(ix, context, opts) : sendGetCollection(ix, context, opts));

          case 19:
            return _context.abrupt("return", opts.sendPing ? opts.sendPing(ix, context, opts) : sendPing(ix, context, opts));

          case 20:
            return _context.abrupt("return", ix);

          case 21:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function send(_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.send = send;
exports.sendExecuteScript = sendExecuteScript;
exports.sendGetAccount = sendGetAccount;
exports.sendGetBlock = sendGetBlock;
exports.sendGetBlockHeader = sendGetBlockHeader;
exports.sendGetCollection = sendGetCollection;
exports.sendGetEvents = sendGetEvents;
exports.sendGetTransaction = sendGetTransaction;
exports.sendGetTransactionStatus = sendGetTransactionStatus;
exports.sendPing = sendPing;
exports.sendTransaction = sendTransaction;
//# sourceMappingURL=sdk-send-http.js.map
