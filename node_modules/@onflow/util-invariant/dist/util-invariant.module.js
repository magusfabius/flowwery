function invariant(fact, msg) {
  if (!fact) {
    var _console;

    var error = new Error("INVARIANT ".concat(msg));
    error.stack = error.stack.split("\n").filter(function (d) {
      return !/at invariant/.test(d);
    }).join("\n");

    for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      rest[_key - 2] = arguments[_key];
    }

    (_console = console).error.apply(_console, ["\n\n---\n\n", error, "\n\n"].concat(rest, ["\n\n---\n\n"]));

    throw error;
  }
}

export { invariant };
//# sourceMappingURL=util-invariant.module.js.map
