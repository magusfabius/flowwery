'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _toArray = require('@babel/runtime/helpers/toArray');
var _typeof = require('@babel/runtime/helpers/typeof');
var _asyncToGenerator = require('@babel/runtime/helpers/asyncToGenerator');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _objectSpread = require('@babel/runtime/helpers/objectSpread2');
var _regeneratorRuntime = require('@babel/runtime/regenerator');
var utilActor = require('@onflow/util-actor');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _toArray__default = /*#__PURE__*/_interopDefaultLegacy(_toArray);
var _typeof__default = /*#__PURE__*/_interopDefaultLegacy(_typeof);
var _asyncToGenerator__default = /*#__PURE__*/_interopDefaultLegacy(_asyncToGenerator);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _objectSpread__default = /*#__PURE__*/_interopDefaultLegacy(_objectSpread);
var _regeneratorRuntime__default = /*#__PURE__*/_interopDefaultLegacy(_regeneratorRuntime);

var _HANDLERS;
var NAME = "config";
var PUT = "PUT_CONFIG";
var GET = "GET_CONFIG";
var GET_ALL = "GET_ALL_CONFIG";
var UPDATE = "UPDATE_CONFIG";
var DELETE = "DELETE_CONFIG";
var CLEAR = "CLEAR_CONFIG";
var WHERE = "WHERE_CONFIG";
var UPDATED = "CONFIG/UPDATED";

var identity = function identity(v) {
  return v;
};

var HANDLERS = (_HANDLERS = {}, _defineProperty__default["default"](_HANDLERS, PUT, function (ctx, _letter, _ref) {
  var key = _ref.key,
      value = _ref.value;
  if (key == null) throw new Error("Missing 'key' for config/put.");
  ctx.put(key, value);
  ctx.broadcast(UPDATED, _objectSpread__default["default"]({}, ctx.all()));
}), _defineProperty__default["default"](_HANDLERS, GET, function (ctx, letter, _ref2) {
  var key = _ref2.key,
      fallback = _ref2.fallback;
  if (key == null) throw new Error("Missing 'key' for config/get");
  letter.reply(ctx.get(key, fallback));
}), _defineProperty__default["default"](_HANDLERS, GET_ALL, function (ctx, letter) {
  letter.reply(_objectSpread__default["default"]({}, ctx.all()));
}), _defineProperty__default["default"](_HANDLERS, UPDATE, function (ctx, letter, _ref3) {
  var key = _ref3.key,
      fn = _ref3.fn;
  if (key == null) throw new Error("Missing 'key' for config/update");
  ctx.update(key, fn || identity);
  ctx.broadcast(UPDATED, _objectSpread__default["default"]({}, ctx.all()));
}), _defineProperty__default["default"](_HANDLERS, DELETE, function (ctx, letter, _ref4) {
  var key = _ref4.key;
  if (key == null) throw new Error("Missing 'key' for config/delete");
  ctx["delete"](key);
  ctx.broadcast(UPDATED, _objectSpread__default["default"]({}, ctx.all()));
}), _defineProperty__default["default"](_HANDLERS, CLEAR, function (ctx, letter) {
  var keys = Object.keys(ctx.all());

  for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {
    var key = _keys[_i];
    ctx["delete"](key);
  }

  ctx.broadcast(UPDATED, _objectSpread__default["default"]({}, ctx.all()));
}), _defineProperty__default["default"](_HANDLERS, WHERE, function (ctx, letter, _ref5) {
  var pattern = _ref5.pattern;
  if (pattern == null) throw new Error("Missing 'pattern' for config/where");
  letter.reply(ctx.where(pattern));
}), _defineProperty__default["default"](_HANDLERS, utilActor.SUBSCRIBE, function (ctx, letter) {
  ctx.subscribe(letter.from);
  ctx.send(letter.from, UPDATED, _objectSpread__default["default"]({}, ctx.all()));
}), _defineProperty__default["default"](_HANDLERS, utilActor.UNSUBSCRIBE, function (ctx, letter) {
  ctx.unsubscribe(letter.from);
}), _HANDLERS);
utilActor.spawn(HANDLERS, NAME);

function put(key, value) {
  utilActor.send(NAME, PUT, {
    key: key,
    value: value
  });
  return config();
}

function get(key, fallback) {
  return utilActor.send(NAME, GET, {
    key: key,
    fallback: fallback
  }, {
    expectReply: true,
    timeout: 10
  });
}

function first() {
  return _first.apply(this, arguments);
}

function _first() {
  _first = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee2() {
    var wants,
        fallback,
        _wants,
        head,
        rest,
        ret,
        _args2 = arguments;

    return _regeneratorRuntime__default["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            wants = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : [];
            fallback = _args2.length > 1 ? _args2[1] : undefined;

            if (wants.length) {
              _context2.next = 4;
              break;
            }

            return _context2.abrupt("return", fallback);

          case 4:
            _wants = _toArray__default["default"](wants), head = _wants[0], rest = _wants.slice(1);
            _context2.next = 7;
            return get(head);

          case 7:
            ret = _context2.sent;

            if (!(ret == null)) {
              _context2.next = 10;
              break;
            }

            return _context2.abrupt("return", first(rest, fallback));

          case 10:
            return _context2.abrupt("return", ret);

          case 11:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _first.apply(this, arguments);
}

function all() {
  return utilActor.send(NAME, GET_ALL, null, {
    expectReply: true,
    timeout: 10
  });
}

function update(key) {
  var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity;
  utilActor.send(NAME, UPDATE, {
    key: key,
    fn: fn
  });
  return config();
}

function _delete(key) {
  utilActor.send(NAME, DELETE, {
    key: key
  });
  return config();
}

function where(pattern) {
  return utilActor.send(NAME, WHERE, {
    pattern: pattern
  }, {
    expectReply: true,
    timeout: 10
  });
}

function subscribe(callback) {
  return utilActor.subscriber(NAME, function () {
    return utilActor.spawn(HANDLERS, NAME);
  }, callback);
}

function clearConfig() {
  return utilActor.send(NAME, CLEAR);
}

function resetConfig(oldConfig) {
  return clearConfig().then(config(oldConfig));
}

function config(values) {
  if (values != null && _typeof__default["default"](values) === "object") {
    Object.keys(values).map(function (d) {
      return put(d, values[d]);
    });
  }

  return {
    put: put,
    get: get,
    all: all,
    first: first,
    update: update,
    "delete": _delete,
    where: where,
    subscribe: subscribe,
    overload: overload
  };
}

config.put = put;
config.get = get;
config.all = all;
config.first = first;
config.update = update;
config["delete"] = _delete;
config.where = where;
config.subscribe = subscribe;
config.overload = overload;

var noop = function noop(v) {
  return v;
};

function overload() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
  return new Promise( /*#__PURE__*/function () {
    var _ref6 = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(resolve, reject) {
      var oldConfig, result;
      return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return all();

            case 2:
              oldConfig = _context.sent;
              _context.prev = 3;
              config(opts);
              _context.t0 = callback;
              _context.next = 8;
              return all();

            case 8:
              _context.t1 = _context.sent;
              _context.next = 11;
              return (0, _context.t0)(_context.t1);

            case 11:
              result = _context.sent;
              _context.next = 14;
              return resetConfig(oldConfig);

            case 14:
              resolve(result);
              _context.next = 22;
              break;

            case 17:
              _context.prev = 17;
              _context.t2 = _context["catch"](3);
              _context.next = 21;
              return resetConfig(oldConfig);

            case 21:
              reject(_context.t2);

            case 22:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[3, 17]]);
    }));

    return function (_x, _x2) {
      return _ref6.apply(this, arguments);
    };
  }());
}

exports.clearConfig = clearConfig;
exports.config = config;
//# sourceMappingURL=config.js.map
