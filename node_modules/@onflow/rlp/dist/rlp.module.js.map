{"version":3,"file":"rlp.module.js","sources":["../src/index.js"],"sourcesContent":["import {Buffer} from \"buffer\"\n\nexport {Buffer}\n\n/**\n * Built on top of rlp library, removing the BN dependency for the flow.\n * Package : https://github.com/ethereumjs/rlp\n * RLP License : https://github.com/ethereumjs/rlp/blob/master/LICENSE\n *\n * ethereumjs/rlp is licensed under the\n * Mozilla Public License 2.0\n * Permissions of this weak copyleft license are conditioned on making available source code of licensed files and modifications of those files under the same license (or in certain cases, one of the GNU licenses). Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. However, a larger work using the licensed work may be distributed under different terms and without source code for files added in the larger work.\n **/\n\n/**\n * @param input - will be converted to buffer\n * @returns returns buffer of encoded data\n **/\nexport function encode(input) {\n  if (Array.isArray(input)) {\n    var output = []\n    for (var i = 0; i < input.length; i++) {\n      output.push(encode(input[i]))\n    }\n    var buf = Buffer.concat(output)\n    return Buffer.concat([encodeLength(buf.length, 192), buf])\n  } else {\n    var inputBuf = toBuffer(input)\n    return inputBuf.length === 1 && inputBuf[0] < 128\n      ? inputBuf\n      : Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf])\n  }\n}\n\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n * @param base The base to parse the integer into\n */\nfunction safeParseInt(v, base) {\n  if (v.slice(0, 2) === \"00\") {\n    throw new Error(\"invalid RLP: extra zeros\")\n  }\n  return parseInt(v, base)\n}\nfunction encodeLength(len, offset) {\n  if (len < 56) {\n    return Buffer.from([len + offset])\n  } else {\n    var hexLength = intToHex(len)\n    var lLength = hexLength.length / 2\n    var firstByte = intToHex(offset + 55 + lLength)\n    return Buffer.from(firstByte + hexLength, \"hex\")\n  }\n}\n\n/**\n * Built on top of rlp library, removing the BN dependency for the flow.\n * Package : https://github.com/ethereumjs/rlp\n * RLP License : https://github.com/ethereumjs/rlp/blob/master/LICENSE\n *\n * ethereumjs/rlp is licensed under the\n * Mozilla Public License 2.0\n * Permissions of this weak copyleft license are conditioned on making available source code of licensed files and modifications of those files under the same license (or in certain cases, one of the GNU licenses). Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. However, a larger work using the licensed work may be distributed under different terms and without source code for files added in the larger work.\n **/\n\n/**\n * @param input - will be converted to buffer\n * @param stream Is the input a stream (false by default)\n * @returns returns buffer of encoded data\n **/\nexport function decode(input, stream) {\n  if (stream === void 0) {\n    stream = false\n  }\n  if (!input || input.length === 0) {\n    return Buffer.from([])\n  }\n  var inputBuffer = toBuffer(input)\n  var decoded = _decode(inputBuffer)\n  if (stream) {\n    return decoded\n  }\n  if (decoded.remainder.length !== 0) {\n    throw new Error(\"invalid remainder\")\n  }\n  return decoded.data\n}\n\n/**\n * Get the length of the RLP input\n * @param input\n * @returns The length of the input or an empty Buffer if no input\n */\nexport function getLength(input) {\n  if (!input || input.length === 0) {\n    return Buffer.from([])\n  }\n  var inputBuffer = toBuffer(input)\n  var firstByte = inputBuffer[0]\n  if (firstByte <= 0x7f) {\n    return inputBuffer.length\n  } else if (firstByte <= 0xb7) {\n    return firstByte - 0x7f\n  } else if (firstByte <= 0xbf) {\n    return firstByte - 0xb6\n  } else if (firstByte <= 0xf7) {\n    // a list between  0-55 bytes long\n    return firstByte - 0xbf\n  } else {\n    // a list  over 55 bytes long\n    var llength = firstByte - 0xf6\n    var length = safeParseInt(inputBuffer.slice(1, llength).toString(\"hex\"), 16)\n    return llength + length\n  }\n}\n\n/** Decode an input with RLP */\nfunction _decode(input) {\n  var length, llength, data, innerRemainder, d\n  var decoded = []\n  var firstByte = input[0]\n  if (firstByte <= 0x7f) {\n    // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n    return {\n      data: input.slice(0, 1),\n      remainder: input.slice(1),\n    }\n  } else if (firstByte <= 0xb7) {\n    // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n    // The range of the first byte is [0x80, 0xb7]\n    length = firstByte - 0x7f\n    // set 0x80 null to 0\n    if (firstByte === 0x80) {\n      data = Buffer.from([])\n    } else {\n      data = input.slice(1, length)\n    }\n    if (length === 2 && data[0] < 0x80) {\n      throw new Error(\"invalid rlp encoding: byte must be less 0x80\")\n    }\n    return {\n      data: data,\n      remainder: input.slice(length),\n    }\n  } else if (firstByte <= 0xbf) {\n    llength = firstByte - 0xb6\n    length = safeParseInt(input.slice(1, llength).toString(\"hex\"), 16)\n    data = input.slice(llength, length + llength)\n    if (data.length < length) {\n      throw new Error(\"invalid RLP\")\n    }\n    return {\n      data: data,\n      remainder: input.slice(length + llength),\n    }\n  } else if (firstByte <= 0xf7) {\n    // a list between  0-55 bytes long\n    length = firstByte - 0xbf\n    innerRemainder = input.slice(1, length)\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder)\n      decoded.push(d.data)\n      innerRemainder = d.remainder\n    }\n    return {\n      data: decoded,\n      remainder: input.slice(length),\n    }\n  } else {\n    // a list  over 55 bytes long\n    llength = firstByte - 0xf6\n    length = safeParseInt(input.slice(1, llength).toString(\"hex\"), 16)\n    var totalLength = llength + length\n    if (totalLength > input.length) {\n      throw new Error(\"invalid rlp: total length is larger than the data\")\n    }\n    innerRemainder = input.slice(llength, totalLength)\n    if (innerRemainder.length === 0) {\n      throw new Error(\"invalid rlp, List has a invalid length\")\n    }\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder)\n      decoded.push(d.data)\n      innerRemainder = d.remainder\n    }\n    return {\n      data: decoded,\n      remainder: input.slice(totalLength),\n    }\n  }\n}\n/** Check if a string is prefixed by 0x */\nfunction isHexPrefixed(str) {\n  return str.slice(0, 2) === \"0x\"\n}\n/** Removes 0x from a given String */\nfunction stripHexPrefix(str) {\n  if (typeof str !== \"string\") {\n    return str\n  }\n  return isHexPrefixed(str) ? str.slice(2) : str\n}\n/** Transform an integer into its hexadecimal value */\nfunction intToHex(integer) {\n  if (integer < 0) {\n    throw new Error(\"Invalid integer as argument, must be unsigned!\")\n  }\n  var hex = integer.toString(16)\n  return hex.length % 2 ? \"0\" + hex : hex\n}\n/** Pad a string to be even */\nfunction padToEven(a) {\n  return a.length % 2 ? \"0\" + a : a\n}\n/** Transform an integer into a Buffer */\nfunction intToBuffer(integer) {\n  var hex = intToHex(integer)\n  return Buffer.from(hex, \"hex\")\n}\n\n/** Transform anything into a Buffer */\nexport function toBuffer(v) {\n  if (!Buffer.isBuffer(v)) {\n    if (typeof v === \"string\") {\n      if (isHexPrefixed(v)) {\n        return Buffer.from(padToEven(stripHexPrefix(v)), \"hex\")\n      } else {\n        return Buffer.from(v)\n      }\n    } else if (typeof v === \"number\") {\n      if (!v) {\n        return Buffer.from([])\n      } else {\n        return intToBuffer(v)\n      }\n    } else if (v === null || v === undefined) {\n      return Buffer.from([])\n    } else if (v instanceof Uint8Array) {\n      return Buffer.from(v)\n    } else {\n      throw new Error(\"invalid type\")\n    }\n  }\n  return v\n}\n"],"names":["encode","input","Array","isArray","output","i","length","push","buf","Buffer","concat","encodeLength","inputBuf","toBuffer","safeParseInt","v","base","slice","Error","parseInt","len","offset","from","hexLength","intToHex","lLength","firstByte","decode","stream","inputBuffer","decoded","_decode","remainder","data","getLength","llength","toString","innerRemainder","d","totalLength","isHexPrefixed","str","stripHexPrefix","integer","hex","padToEven","a","intToBuffer","isBuffer","undefined","Uint8Array"],"mappings":"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"}